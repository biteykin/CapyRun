# auth.py
from __future__ import annotations
import re
import os
from typing import Optional, Dict, Any
import streamlit as st

# --- Supabase client (lazy import-friendly) ---
try:
    from supabase import create_client, Client  # type: ignore
except Exception:
    create_client = None
    Client = object  # type: ignore

SESSION_USER_KEY = "auth_user"
EMAIL_RE = re.compile(r"^[^\s@]+@[^\s@]+\.[^\s@]+$")


def get_supabase() -> "Client":
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç Supabase, —á–∏—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥ –∏–∑ st.secrets –∏–ª–∏ ENV.
    –ù–∏–∫–∞–∫–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ —Å–µ–∫—Ä–µ—Ç–∞–º –Ω–∞ —É—Ä–æ–≤–Ω–µ –∏–º–ø–æ—Ä—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å.
    """
    url = None
    key = None

    # 1) –ü—ã—Ç–∞–µ–º—Å—è –∏–∑ secrets
    try:
        if "supabase" in st.secrets:
            sb = st.secrets["supabase"]
            # –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–ª—é—á–∞: anon_key –∏–ª–∏ key
            url = sb.get("url")
            key = sb.get("anon_key") or sb.get("key")
    except Exception:
        pass

    # 2) –ï—Å–ª–∏ –Ω–µ—Ç –≤ secrets ‚Äî –ø—Ä–æ–±—É–µ–º ENV (–Ω–∞ –≤—Å—è–∫–∏–π)
    url = url or os.getenv("SUPABASE_URL")
    key = key or os.getenv("SUPABASE_KEY")

    if not url or not key:
        st.error(
            "‚ö†Ô∏è Supabase –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.\n\n"
            "–î–æ–±–∞–≤—å —Å–µ–∫—Ä–µ—Ç—ã `[supabase] url` –∏ `anon_key` (–∏–ª–∏ `key`) –≤ `.streamlit/secrets.toml`, "
            "–∏–ª–∏ –∑–∞–¥–∞–π ENV `SUPABASE_URL` / `SUPABASE_KEY`."
        )
        st.caption(
            "–ü—Ä–∏–º–µ—Ä `.streamlit/secrets.toml`:\n\n"
            "[supabase]\n"
            "url = \"https://YOUR_PROJECT.supabase.co\"\n"
            "anon_key = \"YOUR_ANON_KEY\"\n"
        )
        st.stop()

    if create_client is None:
        st.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ `supabase` –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–∞–∫–µ—Ç `supabase`.")
        st.stop()

    return create_client(url, key)


# ---------- helpers ----------
def _current_user(supabase) -> Optional[Dict[str, Any]]:
    # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    try:
        sess = supabase.auth.get_session()
        if sess and getattr(sess, "user", None):
            return {"id": sess.user.id, "email": sess.user.email}
    except Exception:
        pass
    # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
    try:
        gu = supabase.auth.get_user()
        if gu and getattr(gu, "user", None):
            return {"id": gu.user.id, "email": gu.user.email}
    except Exception:
        pass
    # –§–æ–ª–ª–±–µ–∫ –Ω–∞ session_state
    u = st.session_state.get(SESSION_USER_KEY)
    return u if isinstance(u, dict) and u.get("id") else None


def _normalize_user(u: Any) -> Optional[Dict[str, Any]]:
    if not u:
        return None
    if hasattr(u, "user") and getattr(u, "user", None):
        return {"id": u.user.id, "email": u.user.email}
    if hasattr(u, "id") and hasattr(u, "email"):
        return {"id": u.id, "email": u.email}
    if isinstance(u, dict) and u.get("id") is not None:
        return {"id": u["id"], "email": u.get("email")}
    return None


def _sign_out(supabase) -> None:
    try:
        supabase.auth.sign_out()
    except Exception:
        pass


# ---------- low-level auth with safe errors ----------
def _sign_in(supabase, email: str, password: str) -> tuple[Optional[Dict], Optional[str]]:
    try:
        res = supabase.auth.sign_in_with_password({"email": email, "password": password})
        user = _normalize_user(getattr(res, "user", None)) or _normalize_user(res) or _current_user(supabase)
        return (user, None) if user else (None, "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
    except Exception:
        return None, "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å."


def _sign_up(supabase, email: str, password: str) -> tuple[Optional[Dict], Optional[str], bool]:
    if not EMAIL_RE.match(email):
        return None, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.", False
    if len(password) < 6:
        return None, "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤).", False
    try:
        res = supabase.auth.sign_up({"email": email, "password": password})
        user_now = _current_user(supabase)
        if user_now:
            return user_now, None, False
        user_norm = _normalize_user(getattr(res, "user", None)) or _normalize_user(res)
        # –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email ‚Äî –≤–µ—Ä–Ω—ë–º needs_confirmation=True
        return (user_norm, None, True) if not user_now else (user_norm, None, False)
    except Exception as e:
        msg = f"{e}".lower()
        if "weak password" in msg:
            return None, "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π. –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.", False
        if "already registered" in msg:
            return None, "–¢–∞–∫–æ–π email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏.", False
        return None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email/–ø–∞—Ä–æ–ª—å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã.", False


# ---------- UI blocks ----------
def account_block(supabase, user: Dict[str, Any]) -> None:
    st.markdown("### üë§ –ê–∫–∫–∞—É–Ω—Ç")
    st.markdown(f"–í—ã: **{user.get('email','')}**")
    if st.button("–í—ã–π—Ç–∏", use_container_width=True, key="btn_logout"):
        for k in ("auth_mode", "auth_email", "auth_password"):
            st.session_state.pop(k, None)
        st.session_state[SESSION_USER_KEY] = None
        _sign_out(supabase)
        st.rerun()


def auth_sidebar(supabase, show_when_authed: bool = True) -> Optional[Dict, Any]:
    """
    - –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî —Ä–∏—Å—É–µ—Ç —Ñ–æ—Ä–º—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    - –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:
        * show_when_authed=True  -> —Ä–∏—Å—É–µ—Ç account_block –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user
        * show_when_authed=False -> –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∏—Å—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user

    –†–µ–∂–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –ª–µ–Ω–¥–∏–Ω–≥–æ–º —á–µ—Ä–µ–∑ st.session_state['auth_mode']:
      - "login"  -> –í—Ö–æ–¥
      - "signup" -> –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    """
    box = st.empty()
    user = _current_user(supabase)
    if user:
        st.session_state[SESSION_USER_KEY] = user
        if not show_when_authed:
            return user
        with box.container():
            account_block(supabase, user)
        return user

    # --- –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: —Ñ–æ—Ä–º–∞ ---
    with box.container():
        st.markdown("### –í—Ö–æ–¥ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

        # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ª–µ–Ω–¥–∏–Ω–≥–æ–º
        mode_external = st.session_state.get("auth_mode", "login")  # "login" | "signup"
        choices = ["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"]
        default_index = 0 if mode_external == "login" else 1

        mode_label = st.radio(
            "–†–µ–∂–∏–º",
            choices,
            index=default_index,
            horizontal=True,
            label_visibility="collapsed",
            key="auth_mode_label",
        )
        # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ
        st.session_state["auth_mode"] = "login" if mode_label == "–í—Ö–æ–¥" else "signup"

        email = st.text_input("Email", key="auth_email")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="auth_password")

        if st.session_state["auth_mode"] == "signup":
            if st.button("–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", use_container_width=True, key="btn_signup"):
                user_new, err, needs_conf = _sign_up(supabase, email.strip(), password)
                if user_new:
                    st.session_state[SESSION_USER_KEY] = user_new
                    st.success("–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –≤ —Å–∞–π–¥–±–∞—Ä–µ —Å–ª–µ–≤–∞ üëà")
                    st.rerun()
                elif needs_conf and not err:
                    st.info("–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞—Ç–µ–º –≤–æ–π–¥–∏—Ç–µ.")
                else:
                    st.error(err or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.")
        else:
            if st.button("–í–æ–π—Ç–∏", use_container_width=True, key="btn_login"):
                user_signed, err = _sign_in(supabase, email.strip(), password)
                if user_signed:
                    st.session_state[SESSION_USER_KEY] = user_signed
                    st.success("–ì–æ—Ç–æ–≤–æ! –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –≤ —Å–∞–π–¥–±–∞—Ä–µ —Å–ª–µ–≤–∞ üëà")
                    st.rerun()
                else:
                    st.error(err or "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏.")

    return None
