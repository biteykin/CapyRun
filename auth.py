import os
import streamlit as st
from supabase import create_client, Client

# =========================================================
# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# =========================================================
def _read_supabase_creds():
    """–ß–∏—Ç–∞–µ—Ç URL/KEY –∏–∑ st.secrets –∏–ª–∏ ENV. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (url, key) –ª–∏–±–æ (None, None)."""
    url = os.getenv("SUPABASE_URL")
    key = os.getenv("SUPABASE_KEY")
    try:
        if "supabase" in st.secrets:
            sb = st.secrets["supabase"]
            # st.secrets["supabase"] –≤–µ–¥—ë—Ç —Å–µ–±—è –∫–∞–∫ dict
            url = sb.get("url", url)
            key = sb.get("key", key)
    except Exception:
        pass
    return url, key


def get_supabase() -> Client:
    url, key = _read_supabase_creds()
    if not url or not key:
        st.error(
            "‚ö†Ô∏è Supabase –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.\n\n"
            "–î–æ–±–∞–≤—å —Å–µ–∫—Ä–µ—Ç—ã `[supabase] url/key` –≤ `.streamlit/secrets.toml` "
            "–∏–ª–∏ ENV `SUPABASE_URL` / `SUPABASE_KEY`."
        )
        st.caption(
            "–ü—Ä–∏–º–µ—Ä `.streamlit/secrets.toml`:\n\n"
            "[supabase]\n"
            "url = \"https://YOUR_PROJECT.supabase.co\"\n"
            "key = \"YOUR_ANON_OR_SERVICE_KEY\""
        )
        st.stop()
    return create_client(url, key)

# =========================================================
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
# =========================================================
def auth_sidebar(supabase: Client, show_when_authed: bool = False):
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user –ª–∏–±–æ None.
       –†–µ–∂–∏–º ('login' | 'signup') —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ st.session_state['auth_mode'].
    """
    session = supabase.auth.get_session()
    user = session.user if session else None

    # –ï—Å–ª–∏ —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
    if user and not show_when_authed:
        st.markdown("### –ê–∫–∫–∞—É–Ω—Ç")
        st.caption(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ **{user.email}**")
        if st.button("–í—ã–π—Ç–∏", use_container_width=True):
            supabase.auth.sign_out()
            st.experimental_rerun()
        return user

    st.markdown("### –í—Ö–æ–¥ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

    # --- —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ª–µ–Ω–¥–∏–Ω–≥–æ–º ---
    default_mode = st.session_state.get("auth_mode", "login")
    modes = {"–í—Ö–æ–¥": "login", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è": "signup"}

    # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ä–µ–∂–∏–º—É
    mode_names = list(modes.keys())
    current_index = 0 if modes[mode_names[0]] == default_mode else 1

    chosen = st.radio(
        "–†–µ–∂–∏–º",
        mode_names,
        index=current_index,
        horizontal=True,
        label_visibility="collapsed",
    )
    st.session_state["auth_mode"] = modes[chosen]

    # --- —Ñ–æ—Ä–º—ã ---
    if st.session_state["auth_mode"] == "login":
        with st.form("auth_login", clear_on_submit=False):
            email = st.text_input("Email", key="auth_email_login")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="auth_pwd_login")
            submit = st.form_submit_button("–í–æ–π—Ç–∏", use_container_width=True)
        if submit:
            try:
                res = supabase.auth.sign_in_with_password({"email": email, "password": password})
                if res.user:
                    st.success("–ì–æ—Ç–æ–≤–æ! –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –≤ —Å–∞–π–¥–±–∞—Ä–µ —Å–ª–µ–≤–∞ üëà")
                    st.experimental_rerun()
            except Exception as e:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
                st.caption(str(e))
    else:
        with st.form("auth_signup", clear_on_submit=False):
            email = st.text_input("Email", key="auth_email_signup")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="auth_pwd_signup")
            submit = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", use_container_width=True)
        if submit:
            try:
                res = supabase.auth.sign_up({"email": email, "password": password})
                if res.user:
                    st.success("–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –≤ —Å–∞–π–¥–±–∞—Ä–µ —Å–ª–µ–≤–∞ üëà")
                    st.session_state["auth_mode"] = "login"  # –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
                    st.experimental_rerun()
            except Exception as e:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.")
                st.caption(str(e))

    return session.user if session else None

# =========================================================
# –ë–ª–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ (–Ω–∏–∂–µ –ø—Ä–æ—Ñ–∏–ª—è)
# =========================================================
def account_block(supabase: Client, user):
    st.markdown("### üë§ –ê–∫–∫–∞—É–Ω—Ç")
    st.caption(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ **{user.email}**")
    if st.button("–í—ã–π—Ç–∏", use_container_width=True):
        supabase.auth.sign_out()
        st.experimental_rerun()
