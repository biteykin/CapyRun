# app.py ‚Äî CapyRun (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä)
import streamlit as st
from typing import Any
import pandas as pd

# –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from auth import get_supabase, auth_sidebar, account_block
from profile import load_or_init_profile, profile_sidebar
from landing import render_landing
from views_single import render_single_workout
from views_multi import render_multi_workouts
from db_workouts import list_workouts, save_workout

st.set_page_config(
    page_title="CapyRun ‚Äî FIT Analyzer",
    page_icon="üèÉ",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title("üèÉ CapyRun ‚Äî FIT Analyzer")
st.caption("–ó–∞–≥—Ä—É–∑–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ .fit ‚Üí –æ—Ç—á—ë—Ç / –ø—Ä–æ–≥—Ä–µ—Å—Å / –ø–ª–∞–Ω + –∫–∞–ª–µ–Ω–¥–∞—Ä—å (ICS) + Excel")

def _user_id(u: Any):
    return u.get("id") if isinstance(u, dict) else getattr(u, "id", None)

supabase = get_supabase()

# --- –°–∞–π–¥–±–∞—Ä: —Ç–æ–ª—å–∫–æ auth + –ø—Ä–æ—Ñ–∏–ª—å (–ù–ò–ö–ê–ö–ò–• render_landing() –≤–Ω—É—Ç—Ä–∏!) ---
with st.sidebar:
    user = auth_sidebar(supabase, show_when_authed=False)
    if user:
        profile_row = load_or_init_profile(supabase, _user_id(user))
        hr_rest, hr_max, zone_bounds_text = profile_sidebar(supabase, user, profile_row)
        st.divider()
        account_block(supabase, user)

# --- –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî —Ä–∏—Å—É–µ–º –ª–µ–Ω–¥–∏–Ω–≥ –í –û–°–ù–û–í–ù–û–ô –û–ë–õ–ê–°–¢–ò –∏ –≤—ã—Ö–æ–¥–∏–º ---
if not user:
    render_landing()
    st.stop()

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏) ---
uid = _user_id(user)
if not uid:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id. –ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
    st.stop()

def _workouts_df(rows):
    if not rows:
        return None
    df = pd.DataFrame(rows)
    if "distance_m" in df.columns:
        df["distance_km"] = (df["distance_m"].fillna(0) / 1000).round(2)
    return df

# 1) –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
st.markdown("### üèÉ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
_rows = list_workouts(supabase, user_id=uid, limit=20)
df = _workouts_df(_rows)
if df is None or df.empty:
    st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
else:
    st.dataframe(
        df[["uploaded_at", "filename", "sport", "duration_sec", "distance_km"]],
        use_container_width=True,
        hide_index=True
    )

st.divider()

# 2) –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á—ë—Ç–æ–≤
uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ FIT-—Ñ–∞–π–ª(—ã)", type=["fit"], accept_multiple_files=True)

# –ö—ç—à–∏—Ä—É–µ–º –±–∞–π—Ç—ã —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
if uploaded_files:
    valid_files = [f for f in uploaded_files if f is not None and getattr(f, "size", 1) > 0]
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é: –∏–º—è + –±–∞–π—Ç—ã + —Ä–∞–∑–º–µ—Ä
    st.session_state["_uploads_cache"] = [
        {
            "name": f.name,
            "bytes": f.getvalue(),   # —Å–Ω–∏–º–∞–µ–º –∫–æ–ø–∏—é, –ø–æ–∫–∞ —Ñ–∞–π–ª —Ç–æ—á–Ω–æ –∂–∏–≤
            "size": len(f.getvalue())
        }
        for f in valid_files
    ]
else:
    valid_files = []
    st.session_state.pop("_uploads_cache", None)


if not uploaded_files:
    st.info("–ó–∞–≥—Ä—É–∑–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ .fit —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç—á—ë—Ç/–ø—Ä–æ–≥—Ä–µ—Å—Å.")
else:
    # Defensive: –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º None –∏ –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
    valid_files = [f for f in uploaded_files if f is not None and getattr(f, "size", 1) > 0]

    if not valid_files:
        st.warning("–§–∞–π–ª(—ã) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ .fit —Ñ–∞–π–ª—ã.")
    elif len(valid_files) == 1:
        # –û—Ç—á—ë—Ç –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        render_single_workout(
            file=valid_files[0],
            supabase=supabase,
            user_id=uid,
            hr_rest=hr_rest,
            hr_max=hr_max,
            zone_bounds_text=zone_bounds_text,
        )
    else:
        # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ñ–∞–π–ª–∞–º
        try:
            render_multi_workouts(
                files=valid_files,
                supabase=supabase,
                user_id=uid,
                hr_rest=hr_rest,
                hr_max=hr_max,
            )
        except ValueError as e:
            st.error(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–Ω–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã. "
                f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e}"
            )

# -# --- –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î" –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ---
st.markdown("#### üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –ë–î")
if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î"):
    saved, failed = 0, []
    cache = st.session_state.get("_uploads_cache") or []
    for item in cache:
        try:
            ok, err, row = save_workout(
                supabase,
                user_id=uid,
                filename=item["name"],
                size_bytes=item["size"],
                parsed=None,  # —Å—é–¥–∞ –ø–æ–∑–∂–µ –ø–æ–¥—Å—Ç–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            )
            if ok:
                saved += 1
            else:
                failed.append(f"{item['name']}: {err}")
        except Exception as ex:
            failed.append(f"{item['name']}: {ex}")

    if saved:
        st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {saved}")
    if failed:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n- " + "\n- ".join(failed))

    st.rerun()  # —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ –Ω–∞–≤–µ—Ä—Ö—É –æ–±–Ω–æ–≤–∏–ª—Å—è