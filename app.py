# app.py ‚Äî CapyRun (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä)
import streamlit as st
from typing import Any
import pandas as pd
from db_workouts import list_workouts, save_workout, get_workout_by_id
from datetime import datetime

# –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from auth import get_supabase, auth_sidebar, account_block
from profile import load_or_init_profile, profile_sidebar
from landing import render_landing
from views_single import render_single_workout
from views_multi import render_multi_workouts

st.set_page_config(
    page_title="CapyRun ‚Äî FIT Analyzer",
    page_icon="üèÉ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# ===== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ (–Ω–µ–º–Ω–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞ –∏ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è) =====
st.markdown("""
<style>
  .block-container { padding-top: 1.2rem; padding-bottom: 2rem; }
  .stDataFrame { border-radius: 12px; overflow: hidden; }
</style>
""", unsafe_allow_html=True)

# ===== Routing helpers =====
def get_route():
    try:
        qp = dict(st.query_params)
    except Exception:
        qp = st.experimental_get_query_params()
    page = qp.get("page", ["home"])[0] if isinstance(qp.get("page"), list) else qp.get("page", "home")
    sub = qp.get("sub", [None])[0] if isinstance(qp.get("sub"), list) else qp.get("sub", None)
    return page or "home", sub

def set_route(page: str, sub: str = None):
    try:
        if sub:
            st.query_params.update({"page": page, "sub": sub})
        else:
            st.query_params.update({"page": page})
            st.query_params.pop("sub", None)
    except Exception:
        if sub:
            st.experimental_set_query_params(page=page, sub=sub)
        else:
            st.experimental_set_query_params(page=page)

def _user_id(u: Any):
    return u.get("id") if isinstance(u, dict) else getattr(u, "id", None)

def _fmt_hhmmss(sec):
    try:
        sec = int(sec or 0)
        h = sec // 3600
        m = (sec % 3600) // 60
        s = sec % 60
        return f"{h:d}:{m:02d}:{s:02d}" if h else f"{m:d}:{s:02d}"
    except Exception:
        return "‚Äî"

def _fmt_km(meters):
    try:
        return f"{(float(meters or 0)/1000):.2f} –∫–º"
    except Exception:
        return "‚Äî"

def _fmt_pace_min_per_km(m_per_s):
    """–æ–∂–∏–¥–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –º/—Å ‚Üí –≤–µ—Ä–Ω—ë—Ç —Ç–µ–º–ø –º–∏–Ω/–∫–º; –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî '‚Äî'"""
    try:
        v = float(m_per_s or 0.0)
        if v <= 0:
            return "‚Äî"
        pace_sec = 1000.0 / v  # —Å–µ–∫ –Ω–∞ –∫–º
        m = int(pace_sec // 60)
        s = int(round(pace_sec % 60))
        return f"{m}:{s:02d}/–∫–º"
    except Exception:
        return "‚Äî"

supabase = get_supabase()

# --- –°–∞–π–¥–±–∞—Ä: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è + –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –º–µ–Ω—é-–∫–Ω–æ–ø–∫–∏ ---
with st.sidebar:
    # –§–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
    user = auth_sidebar(supabase, show_when_authed=False)

    if user:
        # ===== –°–¢–ò–õ–ò (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –Ω–µ ¬´–∫–∏—Å–ª–æ—Ç–Ω–æ¬ª) =====
        st.markdown("""
        <style>
          section[data-testid="stSidebar"] {
            background: #0e1117;
            border-right: 1px solid rgba(255,255,255,0.06);
          }
          .cr-brand {
            display:flex; align-items:center; gap:10px; margin:6px 0 10px 0;
            color:#fff; font-weight:700; font-size:18px;
          }
          .cr-brand .logo {
            width:28px; height:28px; border-radius:8px; display:flex; align-items:center; justify-content:center;
            background: radial-gradient(120px 60px at 20% 20%, #ff7a7a44 10%, #ff9d5b33 40%, #ffffff08 70%);
          }
          .cr-group-title { 
            color: rgba(255,255,255,0.55); 
            font-size: 11px; letter-spacing: .08em; text-transform: uppercase; 
            margin: 12px 0 6px 2px;
          }
          .cr-item-btn button {
            width: 100%; justify-content: flex-start;
            border-radius: 10px !important;
            background: transparent !important;
            border: 1px solid transparent !important;
            color: #e5e7eb !important;
            padding: 8px 10px !important;
          }
          .cr-item-btn button:hover {
            background: rgba(255,255,255,0.05) !important;
            border-color: rgba(255,255,255,0.08) !important;
          }
          .cr-item-btn.active button {
            background: linear-gradient(135deg, rgba(255,122,122,0.16), rgba(255,157,91,0.16)) !important;
            border-color: rgba(255,255,255,0.12) !important;
            color: #fff !important;
          }
        </style>
        """, unsafe_allow_html=True)

        # helpers –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
        def _qp_dict():
            try: return dict(st.query_params)
            except Exception: return st.experimental_get_query_params()
        def _is_active(page, sub=None):
            qp = _qp_dict()
            cur_p = (qp.get("page",[None])[0] if isinstance(qp.get("page"), list) else qp.get("page")) or "home"
            cur_s = (qp.get("sub",[None])[0] if isinstance(qp.get("sub"), list) else qp.get("sub")
                     if qp.get("sub") is not None else None)
            return (cur_p == page) and ((cur_s or None) == (sub or None))
        def nav_btn(label, page, sub=None, key=None):
            active = _is_active(page, sub)
            cls = "cr-item-btn active" if active else "cr-item-btn"
            with st.container():
                st.markdown(f'<div class="{cls}">', unsafe_allow_html=True)
                if st.button(label, key=key or f"nav_{page}_{sub or 'root'}"):
                    set_route(page, sub)
                    st.rerun()
                st.markdown('</div>', unsafe_allow_html=True)

        # –ë—Ä–µ–Ω–¥
        st.markdown('<div class="cr-brand"><div class="logo">üèÉ</div><div>CapyRun</div></div>', unsafe_allow_html=True)

        # –ì—Ä—É–ø–ø—ã –º–µ–Ω—é (–±–µ–∑ ¬´üß≠ –ù–ê–í–ò–ì–ê–¶–ò–Ø¬ª)
        st.markdown('<div class="cr-group-title">–ì–ª–∞–≤–Ω–æ–µ</div>', unsafe_allow_html=True)
        nav_btn("üè† –ì–ª–∞–≤–Ω–∞—è", "home")

        st.markdown('<div class="cr-group-title">–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</div>', unsafe_allow_html=True)
        nav_btn("üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", "workouts", "list")
        nav_btn("üîé –§–∏–ª—å—Ç—Ä—ã", "workouts", "filters")
        nav_btn("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "workouts", "add")

        st.markdown('<div class="cr-group-title">–¶–µ–ª–∏</div>', unsafe_allow_html=True)
        nav_btn("üéØ –ú–æ–∏ —Ü–µ–ª–∏", "goals", "overview")

        st.markdown('<div class="cr-group-title">–ü–ª–∞–Ω</div>', unsafe_allow_html=True)
        nav_btn("üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω", "plan", "overview")

        st.markdown('<div class="cr-group-title">–û–±—â–µ–Ω–∏–µ</div>', unsafe_allow_html=True)
        nav_btn("üí¨ –ß–∞—Ç —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º", "coach", "chat")

        st.markdown('<div class="cr-group-title">–ü–∏—Ç–∞–Ω–∏–µ</div>', unsafe_allow_html=True)
        nav_btn("üçΩÔ∏è –ò—Å—Ç–æ—Ä–∏—è", "nutrition", "history")
        nav_btn("üî• –ö–∞–ª–æ—Ä–∏–∏", "nutrition", "calories")
        nav_btn("üßÆ –§–∏–ª—å—Ç—Ä—ã", "nutrition", "filters")
        nav_btn("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏", "nutrition", "add")

        st.markdown('<div class="cr-group-title">–ë–µ–π–¥–∂–∏</div>', unsafe_allow_html=True)
        nav_btn("ü•á –ë–µ–π–¥–∂–∏ –∏ —Ä–µ–∫–æ—Ä–¥—ã", "badges", "overview")

        st.markdown('<div class="cr-group-title">–ü—Ä–æ—Ñ–∏–ª—å</div>', unsafe_allow_html=True)
        nav_btn("üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "profile", "data")
        nav_btn("üè∑Ô∏è –ü—Ä–æ–º–æ-–∫–æ–¥", "profile", "promo")
        nav_btn("üö™ –í—ã–π—Ç–∏", "profile", "logout")  # ‚Üê –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏

# --- –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî –ª–µ–Ω–¥–∏–Ω–≥ –∏ –≤—ã—Ö–æ–¥–∏–º ---
if not user:
    render_landing()
    st.stop()

uid = _user_id(user)
if not uid:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id. –ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
    st.stop()

# ====== ROUTER ======
page, sub = get_route()

if page == "home":
    render_home_page(supabase, uid)

elif page == "workouts":
    if sub == "list" or sub is None:
        render_workouts_list(supabase, uid)
    elif sub == "filters":
        render_workouts_filters(supabase, uid)
    elif sub == "add":
        render_workouts_add(supabase, uid, None, None, None)
    elif sub == "detail":
        qp = dict(st.query_params)
        workout_id = qp.get("workout_id")
        if isinstance(workout_id, list):
            workout_id = workout_id[0]
        render_workout_detail_view(supabase, user_id=uid, workout_id=workout_id)

elif page == "goals":
    render_goals_overview(supabase, uid)

elif page == "plan":
    render_plan_overview(supabase, uid)

elif page == "coach":
    render_coach_chat(supabase, uid)

elif page == "nutrition":
    if sub == "history" or sub is None:
        render_nutrition_history(supabase, uid)
    elif sub == "calories":
        render_nutrition_calories(supabase, uid)
    elif sub == "filters":
        render_nutrition_filters(supabase, uid)
    elif sub == "add":
        render_nutrition_add(supabase, uid)

elif page == "profile":
    if sub == "data" or sub is None:
        render_profile_data(supabase, uid)
    elif sub == "promo":
        render_profile_promo(supabase, uid)
    elif sub == "logout":
        render_profile_logout(supabase, uid)

elif page == "badges":
    render_badges_overview(supabase, uid)

else:
    st.error("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# ====== PAGES ======

def render_home_page(supabase, uid: str):
    st.title("üè† –ì–ª–∞–≤–Ω–∞—è")

    # –¢–≤–æ–π –ø—Ä–µ–∂–Ω–∏–π ¬´–≥–µ—Ä–æ–π¬ª-—Ç–µ–∫—Å—Ç
    st.subheader("üèÉ CapyRun ‚Äî FIT Analyzer")
    st.caption("–ó–∞–≥—Ä—É–∑–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ .fit ‚Üí –æ—Ç—á—ë—Ç / –ø—Ä–æ–≥—Ä–µ—Å—Å / –ø–ª–∞–Ω + –∫–∞–ª–µ–Ω–¥–∞—Ä—å (ICS) + Excel")
    st.divider()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã (–ø–µ—Ä–µ–Ω–æ—Å–∏–º –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ app.py)
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ FIT-—Ñ–∞–π–ª(—ã)", type=["fit"], accept_multiple_files=True)

    # –º–æ–∂–Ω–æ –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å hr_rest/hr_max/zone_bounds_text, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã —Ç–≤–æ–∏–º —Ä–µ–Ω–¥–µ—Ä–∞–º:
    hr_rest = st.session_state.get("hr_rest")
    hr_max = st.session_state.get("hr_max")
    zone_bounds_text = st.session_state.get("zone_bounds_text")

    if not uploaded_files:
        st.info("–ó–∞–≥—Ä—É–∑–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ .fit —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç—á—ë—Ç/–ø—Ä–æ–≥—Ä–µ—Å—Å.")
        return

    valid_files = [f for f in uploaded_files if f is not None and getattr(f, "size", 1) > 0]
    if not valid_files:
        st.warning("–§–∞–π–ª(—ã) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ .fit —Ñ–∞–π–ª—ã.")
        return

    # –ï—Å–ª–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª ‚Äî –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî —Å–≤–æ–¥–Ω—ã–π (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    if len(valid_files) == 1:
        try:
            render_single_workout(
                file=valid_files[0],
                supabase=supabase,
                user_id=uid,
                hr_rest=hr_rest,
                hr_max=hr_max,
                zone_bounds_text=zone_bounds_text,
            )
        except Exception as e:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞."); st.code(str(e))
    else:
        try:
            render_multi_workouts(
                files=valid_files,
                supabase=supabase,
                user_id=uid,
                hr_rest=hr_rest,
                hr_max=hr_max,
            )
        except ValueError as e:
            st.error(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–Ω–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã."
            )
            st.code(str(e))

def render_workouts_list(supabase, uid: str):
    st.title("üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫")
    rows = list_workouts(supabase, user_id=uid, limit=100)
    if not rows:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return
    for r in rows:
        c1, c2, c3, c4, c5 = st.columns([4,2,2,2,2])
        with c1:
            st.write(f"**{r.get('filename','(–±–µ–∑ –∏–º–µ–Ω–∏)')}**")
            st.caption(f"id: `{r.get('id')}`")
        with c2: st.write(r.get("sport") or "‚Äî")
        with c3:
            d = r.get("duration_sec"); st.write(f"{int(d)//60} –º–∏–Ω" if d else "‚Äî")
        with c4:
            dm = r.get("distance_m"); st.write(f"{dm/1000:.2f} –∫–º" if dm else "‚Äî")
        with c5:
            if st.button("–û—Ç–∫—Ä—ã—Ç—å", key=f"open_{r.get('id')}"):
                set_route("workouts", "detail")
                try:
                    st.query_params.update({"workout_id": r.get("id")})
                except Exception:
                    st.experimental_set_query_params(page="workouts", sub="detail", workout_id=r.get("id"))
                st.rerun()

def render_workouts_filters(supabase, uid: str):
    st.title("üîé –§–∏–ª—å—Ç—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_workouts_add(supabase, uid: str, hr_rest: int, hr_max: int, zone_bounds_text: str):
    st.title("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
    uploaded = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ .fit —Ñ–∞–π–ª—ã", type=["fit"], accept_multiple_files=True)
    if uploaded and st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î"):
        saved, failed = 0, []
        for f in uploaded:
            try:
                ok, err, _ = save_workout(
                    supabase,
                    user_id=uid,
                    filename=getattr(f,"name","unknown.fit"),
                    size_bytes=len(f.getvalue()),
                    parsed=None,
                )
                if ok: saved += 1
                else: failed.append(f"{f.name}: {err}")
            except Exception as ex:
                failed.append(f"{f.name}: {ex}")
        if saved: st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved}")
        if failed: st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n- " + "\n- ".join(failed))
        st.rerun()

def render_workout_detail_view(supabase, user_id: str, workout_id: str):
    st.title("üìÑ –î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    if not workout_id:
        st.info("–ù–µ –≤—ã–±—Ä–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        return
    row = get_workout_by_id(supabase, workout_id=workout_id, user_id=user_id)
    if not row:
        st.error("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    c1,c2,c3,c4 = st.columns([4,2,2,2])
    with c1: st.markdown(f"**{row.get('filename','')}**"); st.caption(f"id: `{row.get('id')}`")
    with c2: st.write(row.get("sport") or "‚Äî")
    with c3:
        d = row.get("duration_sec"); st.write(f"{int(d)//60} –º–∏–Ω" if d else "‚Äî")
    with c4:
        dm = row.get("distance_m"); st.write(f"{dm/1000:.2f} –∫–º" if dm else "‚Äî")
    st.divider()
    st.subheader("fit_summary")
    st.json(row.get("fit_summary") or {})
    if st.button("‚Üê –ù–∞–∑–∞–¥"):
        set_route("workouts","list"); st.rerun()

# ---------- –ü–†–û–§–ò–õ–¨ (–∑–∞–≥–ª—É—à–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ) ----------
def render_profile_data(supabase, uid: str):
    st.title("üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_profile_promo(supabase, uid: str):
    st.title("üè∑Ô∏è –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –ü—Ä–æ–º–æ-–∫–æ–¥")
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_profile_logout(supabase, uid: str):
    st.title("üö™ –í—ã–π—Ç–∏")
    st.info("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")
    # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∞—É—Ç–∞ –≤ auth, –≤—ã–∑–æ–≤–∏ –µ—ë —Ç—É—Ç:
    # auth_sign_out(supabase)

def render_badges_overview(supabase, uid: str):
    st.title("ü•á –ë–µ–π–¥–∂–∏ –∏ —Ä–µ–∫–æ—Ä–¥—ã")
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_goals_overview(supabase, uid: str):
    st.title("üéØ –¶–µ–ª–∏")
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_plan_overview(supabase, uid: str):
    st.title("üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω")
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_coach_chat(supabase, uid: str):
    st.title("üí¨ –ß–∞—Ç —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º")
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_nutrition_history(supabase, uid: str):
    st.title("üçΩÔ∏è –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è ‚Äî –ò—Å—Ç–æ—Ä–∏—è")
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_nutrition_calories(supabase, uid: str):
    st.title("üî• –ö–∞–ª–æ—Ä–∏–∏")
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_nutrition_filters(supabase, uid: str):
    st.title("üßÆ –§–∏–ª—å—Ç—Ä—ã –ø–∏—Ç–∞–Ω–∏—è")
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_nutrition_add(supabase, uid: str):
    st.title("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏")
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")