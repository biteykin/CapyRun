# app.py ‚Äî CapyRun (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä)
import streamlit as st
from typing import Any
import pandas as pd
from db_workouts import list_workouts, save_workout, get_workout_by_id
from datetime import datetime

# –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from auth import get_supabase, auth_sidebar, account_block
from profile import load_or_init_profile, profile_sidebar
from landing import render_landing
from views_single import render_single_workout
from views_multi import render_multi_workouts

st.set_page_config(
    page_title="CapyRun ‚Äî FIT Analyzer",
    page_icon="üèÉ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# ===== Routing helpers =====
def get_route():
    try:
        qp = dict(st.query_params)
    except Exception:
        qp = st.experimental_get_query_params()
    page = qp.get("page", ["home"])[0] if isinstance(qp.get("page"), list) else qp.get("page", "home")
    sub = qp.get("sub", [None])[0] if isinstance(qp.get("sub"), list) else qp.get("sub", None)
    return page or "home", sub

def set_route(page: str, sub: str = None):
    try:
        if sub:
            st.query_params.update({"page": page, "sub": sub})
        else:
            st.query_params.update({"page": page})
            st.query_params.pop("sub", None)
    except Exception:
        if sub:
            st.experimental_set_query_params(page=page, sub=sub)
        else:
            st.experimental_set_query_params(page=page)

st.title("üèÉ CapyRun ‚Äî FIT Analyzer")
st.caption("–ó–∞–≥—Ä—É–∑–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ .fit ‚Üí –æ—Ç—á—ë—Ç / –ø—Ä–æ–≥—Ä–µ—Å—Å / –ø–ª–∞–Ω + –∫–∞–ª–µ–Ω–¥–∞—Ä—å (ICS) + Excel")

def _user_id(u: Any):
    return u.get("id") if isinstance(u, dict) else getattr(u, "id", None)

def _fmt_hhmmss(sec):
    try:
        sec = int(sec or 0)
        h = sec // 3600
        m = (sec % 3600) // 60
        s = sec % 60
        return f"{h:d}:{m:02d}:{s:02d}" if h else f"{m:d}:{s:02d}"
    except Exception:
        return "‚Äî"

def _fmt_km(meters):
    try:
        return f"{(float(meters or 0)/1000):.2f} –∫–º"
    except Exception:
        return "‚Äî"

def _fmt_pace_min_per_km(m_per_s):
    """–æ–∂–∏–¥–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –º/—Å ‚Üí –≤–µ—Ä–Ω—ë—Ç —Ç–µ–º–ø –º–∏–Ω/–∫–º; –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî '‚Äî'"""
    try:
        v = float(m_per_s or 0.0)
        if v <= 0:
            return "‚Äî"
        pace_sec = 1000.0 / v  # —Å–µ–∫ –Ω–∞ –∫–º
        m = int(pace_sec // 60)
        s = int(round(pace_sec % 60))
        return f"{m}:{s:02d}/–∫–º"
    except Exception:
        return "‚Äî"

supabase = get_supabase()

# --- –°–∞–π–¥–±–∞—Ä: —Ç–æ–ª—å–∫–æ auth + –ø—Ä–æ—Ñ–∏–ª—å (–ù–ò–ö–ê–ö–ò–• render_landing() –≤–Ω—É—Ç—Ä–∏!) ---
with st.sidebar:
    user = auth_sidebar(supabase, show_when_authed=False)
    if user:
        profile_row = load_or_init_profile(supabase, _user_id(user))
        hr_rest, hr_max, zone_bounds_text = profile_sidebar(supabase, user, profile_row)
        st.divider()
        account_block(supabase, user)

        # ====== NAVIGATION ======
        st.markdown("### üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")

        def nav_btn(label, page, sub=None, key=None, icon=""):
            if st.button(f"{icon} {label}", key=key or f"nav_{page}_{sub or 'root'}"):
                set_route(page, sub)
                st.rerun()

        # –ì–ª–∞–≤–Ω–∞—è
        nav_btn("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", "home", icon="üè†")

        # –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        with st.expander("–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", expanded=True):
            nav_btn("–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", "workouts", "list", icon="üìã")
            nav_btn("–§–∏–ª—å—Ç—Ä—ã", "workouts", "filters", icon="üîé")
            nav_btn("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "workouts", "add", icon="‚ûï")

        # –¶–µ–ª–∏
        with st.expander("–¶–µ–ª–∏", expanded=False):
            nav_btn("–ú–æ–∏ —Ü–µ–ª–∏", "goals", "overview", icon="üéØ")

        # –ü–ª–∞–Ω
        with st.expander("–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω", expanded=False):
            nav_btn("–ü–ª–∞–Ω", "plan", "overview", icon="üìÖ")

        # –û–±—â–µ–Ω–∏–µ
        with st.expander("–û–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º", expanded=False):
            nav_btn("–ß–∞—Ç —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º", "coach", "chat", icon="üí¨")

        # –ü–∏—Ç–∞–Ω–∏–µ
        with st.expander("–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è", expanded=False):
            nav_btn("–ò—Å—Ç–æ—Ä–∏—è", "nutrition", "history", icon="üçΩÔ∏è")
            nav_btn("–ö–∞–ª–æ—Ä–∏–∏", "nutrition", "calories", icon="üî•")
            nav_btn("–§–∏–ª—å—Ç—Ä—ã", "nutrition", "filters", icon="üßÆ")
            nav_btn("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏", "nutrition", "add", icon="‚ûï")

        # –ü—Ä–æ—Ñ–∏–ª—å
        with st.expander("–ü—Ä–æ—Ñ–∏–ª—å", expanded=False):
            nav_btn("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "profile", "data", icon="üë§")
            nav_btn("–õ–æ–≥–∏–Ω", "profile", "login", icon="üîê")
            nav_btn("–ü—Ä–æ–º–æ-–∫–æ–¥", "profile", "promo", icon="üè∑Ô∏è")
            nav_btn("–î–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "profile", "logout", icon="üö™")

        # –ë–µ–π–¥–∂–∏
        with st.expander("–ë–µ–π–¥–∂–∏ –∏ —Ä–µ–∫–æ—Ä–¥—ã", expanded=False):
            nav_btn("–ú–æ–∏ –±–µ–π–¥–∂–∏", "badges", "overview", icon="ü•á")

# --- –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî –ª–µ–Ω–¥–∏–Ω–≥ –∏ –≤—ã—Ö–æ–¥–∏–º ---
if not user:
    render_landing()
    st.stop()

uid = _user_id(user)
if not uid:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id. –ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
    st.stop()

# ====== ROUTER ======
page, sub = get_route()

if page == "home":
    render_home_page(supabase, uid)

elif page == "workouts":
    if sub == "list" or sub is None:
        render_workouts_list(supabase, uid)
    elif sub == "filters":
        render_workouts_filters(supabase, uid)
    elif sub == "add":
        render_workouts_add(supabase, uid, hr_rest, hr_max, zone_bounds_text)
    elif sub == "detail":
        qp = dict(st.query_params)
        workout_id = qp.get("workout_id")
        if isinstance(workout_id, list):
            workout_id = workout_id[0]
        render_workout_detail_view(supabase, user_id=uid, workout_id=workout_id)

elif page == "goals":
    render_goals_overview(supabase, uid)

elif page == "plan":
    render_plan_overview(supabase, uid)

elif page == "coach":
    render_coach_chat(supabase, uid)

elif page == "nutrition":
    if sub == "history" or sub is None:
        render_nutrition_history(supabase, uid)
    elif sub == "calories":
        render_nutrition_calories(supabase, uid)
    elif sub == "filters":
        render_nutrition_filters(supabase, uid)
    elif sub == "add":
        render_nutrition_add(supabase, uid)

elif page == "profile":
    if sub == "data" or sub is None:
        render_profile_data(supabase, uid)
    elif sub == "login":
        render_profile_login(supabase, uid)
    elif sub == "promo":
        render_profile_promo(supabase, uid)
    elif sub == "logout":
        render_profile_logout(supabase, uid)

elif page == "badges":
    render_badges_overview(supabase, uid)

else:
    st.error("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# ====== PAGES ======

def render_home_page(supabase, uid: str):
    st.title("üè† –ì–ª–∞–≤–Ω–∞—è")
    st.subheader("–°–º–µ—à–Ω—ã–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã")
    st.info("¬´–ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ–±–µ–∂–∏—à—å, –∑–∞–≤—Ç—Ä–∞ –ø–æ–±–µ–∂–∏—Ç –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π‚Ä¶ –∑–∞ —Ç–≤–æ–µ–π –ø–∏—Ü—Ü–µ–π¬ª üçïüèÉ")
    st.button("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ü–∏—Ç–∞—Ç–æ–π")
    st.subheader("–ò–Ω—Å–∞–π—Ç—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º (—Ä–µ—Ç—Ä–æ)")
    st.caption("–¢—É—Ç –ø–æ—è–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")

def render_workouts_list(supabase, uid: str):
    st.title("üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫")
    rows = list_workouts(supabase, user_id=uid, limit=100)
    if not rows:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return
    for r in rows:
        c1, c2, c3, c4, c5 = st.columns([4,2,2,2,2])
        with c1:
            st.write(f"**{r.get('filename','(–±–µ–∑ –∏–º–µ–Ω–∏)')}**")
            st.caption(f"id: `{r.get('id')}`")
        with c2: st.write(r.get("sport") or "‚Äî")
        with c3:
            d = r.get("duration_sec"); st.write(f"{int(d)//60} –º–∏–Ω" if d else "‚Äî")
        with c4:
            dm = r.get("distance_m"); st.write(f"{dm/1000:.2f} –∫–º" if dm else "‚Äî")
        with c5:
            if st.button("–û—Ç–∫—Ä—ã—Ç—å", key=f"open_{r.get('id')}"):
                set_route("workouts", "detail")
                try:
                    st.query_params.update({"workout_id": r.get("id")})
                except Exception:
                    st.experimental_set_query_params(page="workouts", sub="detail", workout_id=r.get("id"))
                st.rerun()

def render_workouts_filters(supabase, uid: str):
    st.title("üîé –§–∏–ª—å—Ç—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
    st.write("–ó–¥–µ—Å—å –±—É–¥—É—Ç —Ñ–∏–ª—å—Ç—Ä—ã: –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞, –¥–∞—Ç–∞–º, –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏, –ø—É–ª—å—Å—É –∏ —Ç.–¥.")

def render_workouts_add(supabase, uid: str, hr_rest: int, hr_max: int, zone_bounds_text: str):
    st.title("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
    uploaded = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ .fit —Ñ–∞–π–ª—ã", type=["fit"], accept_multiple_files=True)
    if uploaded and st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î"):
        saved, failed = 0, []
        for f in uploaded:
            try:
                ok, err, _ = save_workout(
                    supabase,
                    user_id=uid,
                    filename=getattr(f,"name","unknown.fit"),
                    size_bytes=len(f.getvalue()),
                    parsed=None,
                )
                if ok: saved += 1
                else: failed.append(f"{f.name}: {err}")
            except Exception as ex:
                failed.append(f"{f.name}: {ex}")
        if saved: st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved}")
        if failed: st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n- " + "\n- ".join(failed))
        st.rerun()

def render_workout_detail_view(supabase, user_id: str, workout_id: str):
    st.title("üìÑ –î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    if not workout_id:
        st.info("–ù–µ –≤—ã–±—Ä–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        return
    row = get_workout_by_id(supabase, workout_id=workout_id, user_id=user_id)
    if not row:
        st.error("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    c1,c2,c3,c4 = st.columns([4,2,2,2])
    with c1: st.markdown(f"**{row.get('filename','')}**"); st.caption(f"id: `{row.get('id')}`")
    with c2: st.write(row.get("sport") or "‚Äî")
    with c3:
        d = row.get("duration_sec"); st.write(f"{int(d)//60} –º–∏–Ω" if d else "‚Äî")
    with c4:
        dm = row.get("distance_m"); st.write(f"{dm/1000:.2f} –∫–º" if dm else "‚Äî")
    st.divider()
    st.subheader("fit_summary")
    st.json(row.get("fit_summary") or {})
    if st.button("‚Üê –ù–∞–∑–∞–¥"):
        set_route("workouts","list"); st.rerun()

def render_goals_overview(supabase, uid: str):
    st.title("üéØ –¶–µ–ª–∏"); st.write("–ó–¥–µ—Å—å –≤—ã –±—É–¥–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.")

def render_plan_overview(supabase, uid: str):
    st.title("üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω"); st.write("–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å.")

def render_coach_chat(supabase, uid: str):
    st.title("üí¨ –û–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º"); st.write("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —á–∞—Ç —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º.")

def render_nutrition_history(supabase, uid: str):
    st.title("üçΩÔ∏è –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è ‚Äî –ò—Å—Ç–æ—Ä–∏—è"); st.write("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å.")

def render_nutrition_calories(supabase, uid: str):
    st.title("üî• –ö–∞–ª–æ—Ä–∏–∏"); st.write("–°–≤–æ–¥–∫–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º.")

def render_nutrition_filters(supabase, uid: str):
    st.title("üßÆ –§–∏–ª—å—Ç—Ä—ã –ø–∏—Ç–∞–Ω–∏—è"); st.write("–§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –ë–ñ–£‚Ä¶")

def render_nutrition_add(supabase, uid: str):
    st.title("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏"); st.write("–í 1-–π –≤–µ—Ä—Å–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é; —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç ‚Äî –ø–æ–∑–∂–µ.")

def render_profile_data(supabase, uid: str):
    st.title("üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    st.write("–í–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –≤–µ—Å, –ø—É–ª—å—Å –ø–æ–∫–æ—è, –º–∞–∫—Å –ø—É–ª—å—Å (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É), –∑–æ–Ω—ã, VO2max, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã‚Ä¶")

def render_profile_login(supabase, uid: str):
    st.title("üîê –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –õ–æ–≥–∏–Ω"); st.write("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–æ–º.")

def render_profile_promo(supabase, uid: str):
    st.title("üè∑Ô∏è –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –ü—Ä–æ–º–æ-–∫–æ–¥"); st.write("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤.")

def render_profile_logout(supabase, uid: str):
    st.title("üö™ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –î–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"); st.write("–ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞.")

def render_badges_overview(supabase, uid: str):
    st.title("ü•á –ë–µ–π–¥–∂–∏ –∏ —Ä–µ–∫–æ—Ä–¥—ã"); st.write("–í–∞—à–∏ –∞—á–∏–≤–∫–∏ –∏ PB.")