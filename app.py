import io
import math
import numpy as np
import pandas as pd
import altair as alt
import streamlit as st
from fitparse import FitFile

# ---------- UI ----------
st.set_page_config(page_title="CapyRun Quick Report", page_icon="üèÉ", layout="wide")
st.title("üèÉ CapyRun ‚Äî Quick FIT Report")
st.caption("–ó–∞–≥—Ä—É–∑–∏ .fit ‚Üí –ø–æ–ª—É—á–∏ —Å–≤–æ–¥–∫—É, –≥—Ä–∞—Ñ–∏–∫–∏, –∑–æ–Ω—ã, compliance –∏ Excel")

with st.sidebar:
    st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    hr_rest = st.number_input("–ü—É–ª—å—Å –≤ –ø–æ–∫–æ–µ (HRrest)", min_value=30, max_value=100, value=60, step=1)
    hr_max  = st.number_input("–ú–∞–∫—Å. –ø—É–ª—å—Å (HRmax)", min_value=140, max_value=220, value=190, step=1)
    zone_bounds = st.text_input("–ì—Ä–∞–Ω–∏—Ü—ã –∑–æ–Ω HR (—É–¥/–º–∏–Ω, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value="120,140,155,170,185")
    st.caption("–ü—Ä–∏–º–µ—Ä: 120,140,155,170,185 ‚Üí –ø–æ–ª—É—á–∏—Ç—Å—è Z1‚Ä¶Z5")

uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ FIT-—Ñ–∞–π–ª", type=["fit"], accept_multiple_files=False)

# ---------- helpers ----------
def get_val(msg, name, alt_name=None):
    v = msg.get_value(name)
    if (v is None) and alt_name:
        v = msg.get_value(alt_name)
    return v

def pace_from_speed(spd):
    if spd is None or spd <= 0: return None
    sec_per_km = 1000.0 / spd
    m = int(sec_per_km // 60); s = int(round(sec_per_km % 60))
    return f"{m}:{s:02d}"

def speed_to_pace_min_per_km(spd):
    if spd is None or spd <= 0: return np.nan
    return (1000.0 / spd) / 60.0

def compute_trimp(hr_series, hr_rest, hr_max):
    if hr_series is None or hr_series.isna().all(): return None
    rel = (hr_series - hr_rest) / max(1, (hr_max - hr_rest))
    rel = rel.clip(lower=0)
    # –≥—Ä—É–±–æ –Ω–æ—Ä–º–∏—Ä—É–µ–º –∫ –º–∏–Ω—É—Ç–∞–º (–≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥ —É—á–∏—Ç—ã–≤–∞–µ–º –Ω–∏–∂–µ –ø—Ä–∏ compliance)
    return rel.mean() * (len(hr_series) / 60.0) * 100

def zones_time(series, bounds):
    if series is None or series.isna().all(): return None
    bins = [-np.inf] + bounds + [np.inf]
    z = pd.cut(series, bins=bins, labels=[f"Z{i}" for i in range(1, len(bins))])
    return z.value_counts().sort_index()

def efficiency_factor(speed, hr):
    if speed is None or hr is None: return None
    valid = speed.notna() & hr.notna() & (hr > 0)
    if not valid.any(): return None
    return (speed[valid].mean() / hr[valid].mean())

def decoupling(speed, hr):
    valid = speed.notna() & hr.notna() & (hr > 0)
    if valid.sum() < 20: return None
    idx = np.where(valid)[0]
    half = len(idx) // 2
    first = idx[:half]; second = idx[half:]
    if len(first) < 10 or len(second) < 10: return None
    ef1 = speed.iloc[first].mean() / hr.iloc[first].mean()
    ef2 = speed.iloc[second].mean() / hr.iloc[second].mean()
    if ef1 <= 0: return None
    return (ef2/ef1 - 1.0) * 100.0

def to_excel(dfs_named: dict):
    bio = io.BytesIO()
    with pd.ExcelWriter(bio, engine="xlsxwriter", datetime_format="yyyy-mm-dd hh:mm:ss") as writer:
        for name, df in dfs_named.items():
            df.to_excel(writer, sheet_name=name, index=False)
            ws = writer.sheets[name]
            if not df.empty:
                ws.autofilter(0, 0, len(df), max(0, len(df.columns)-1))
            ws.freeze_panes(1, 0)
            for i, col in enumerate(df.columns):
                maxlen = min(60, max(len(str(col)), *(len(str(x)) for x in df[col].head(200).fillna("").astype(str))))
                ws.set_column(i, i, max(9, maxlen + 1))
    bio.seek(0)
    return bio

def parse_bounds(text):
    try:
        b = [int(x.strip()) for x in text.split(",") if x.strip()]
        b = [v for v in b if 30 <= v <= 240]
        b.sort()
        return b
    except Exception:
        return []

# ---------- parsing ----------
if uploaded:
    fit = FitFile(uploaded)

    # Records
    rec_rows = []
    for m in fit.get_messages("record"):
        rec_rows.append({
            "timestamp": get_val(m, "timestamp"),
            "hr":        get_val(m, "heart_rate"),
            "speed":     get_val(m, "speed", "enhanced_speed"),      # m/s
            "cadence":   get_val(m, "cadence"),
            "power":     get_val(m, "power"),
            "elev":      get_val(m, "altitude", "enhanced_altitude"),
            "dist":      get_val(m, "distance"),                     # meters (cumulative)
        })
    df_rec = pd.DataFrame(rec_rows)
    if not df_rec.empty:
        df_rec["timestamp"] = pd.to_datetime(df_rec["timestamp"], errors="coerce")
        df_rec = df_rec.sort_values("timestamp").reset_index(drop=True)
        if df_rec["timestamp"].notna().any():
            t0 = df_rec["timestamp"].min()
            df_rec["t_rel_s"] = (df_rec["timestamp"] - t0).dt.total_seconds()
        else:
            df_rec["t_rel_s"] = np.arange(len(df_rec))
        df_rec["pace"] = df_rec["speed"].apply(pace_from_speed)
        # dt –¥–ª—è –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        df_rec["dt_s"] = df_rec["t_rel_s"].diff().fillna(0)

    # Laps
    lap_rows = []
    for m in fit.get_messages("lap"):
        lap_rows.append({
            "message_index": get_val(m, "message_index"),
            "start_time": get_val(m, "start_time"),
            "total_distance_m": get_val(m, "total_distance"),
            "total_timer_time_s": get_val(m, "total_timer_time"),
            "avg_hr": get_val(m, "avg_heart_rate"),
            "max_hr": get_val(m, "max_heart_rate"),
            "avg_speed_m_s": get_val(m, "avg_speed", "enhanced_avg_speed"),
            "max_speed_m_s": get_val(m, "max_speed", "enhanced_max_speed"),
            "avg_cadence": get_val(m, "avg_cadence"),
            "total_ascent_m": get_val(m, "total_ascent"),
            "total_descent_m": get_val(m, "total_descent"),
            "lap_trigger": get_val(m, "lap_trigger"),
            "intensity": get_val(m, "intensity"),
        })
    df_laps = pd.DataFrame(lap_rows)
    if not df_laps.empty:
        df_laps["start_time"] = pd.to_datetime(df_laps["start_time"], errors="coerce")
        df_laps = df_laps.sort_values("start_time").reset_index(drop=True)

    # Sessions
    ses_rows = []
    for m in fit.get_messages("session"):
        ses_rows.append({
            "start_time": get_val(m, "start_time"),
            "sport": get_val(m, "sport"),
            "sub_sport": get_val(m, "sub_sport"),
            "total_distance_m": get_val(m, "total_distance"),
            "total_elapsed_time_s": get_val(m, "total_elapsed_time"),
            "total_timer_time_s": get_val(m, "total_timer_time"),
            "avg_hr": get_val(m, "avg_heart_rate"),
            "max_hr": get_val(m, "max_heart_rate"),
            "avg_speed_m_s": get_val(m, "avg_speed", "enhanced_avg_speed"),
            "max_speed_m_s": get_val(m, "max_speed", "enhanced_max_speed"),
            "avg_cadence": get_val(m, "avg_cadence"),
            "total_ascent_m": get_val(m, "total_ascent"),
            "total_descent_m": get_val(m, "total_descent"),
        })
    df_ses = pd.DataFrame(ses_rows)

    # Workout steps (targets) ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
    ws_rows = []
    for m in fit.get_messages("workout_step"):
        ws_rows.append({
            "message_index": get_val(m, "message_index"),
            "duration_type": get_val(m, "duration_type"),
            "duration_value": get_val(m, "duration_value"),
            "target_type": get_val(m, "target_type"),
            # –Ω–∏–∂/–≤–µ—Ä—Ö –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ü–µ–ª–µ–π (–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —É Garmin)
            "custom_target_value_low": get_val(m, "custom_target_value_low"),
            "custom_target_value_high": get_val(m, "custom_target_value_high"),
            "intensity": get_val(m, "intensity"),
        })
    df_steps = pd.DataFrame(ws_rows)

    # ---------- metrics ----------
    bounds = parse_bounds(zone_bounds)
    if not df_rec.empty:
        trimp = compute_trimp(df_rec["hr"], hr_rest, hr_max)
        ef = efficiency_factor(df_rec["speed"], df_rec["hr"])
        de = decoupling(df_rec["speed"], df_rec["hr"])
        zt = zones_time(df_rec["hr"], bounds) if bounds else None
    else:
        trimp = ef = de = None
        zt = None

    # ---------- summary metrics UI ----------
    col1, col2, col3 = st.columns(3)
    with col1:
        dist_km = None
        if not df_ses.empty and pd.notna(df_ses.iloc[0].get("total_distance_m")):
            dist_km = df_ses.iloc[0]["total_distance_m"] / 1000.0
        elif not df_rec.empty and df_rec["dist"].notna().any():
            dist_km = df_rec["dist"].max() / 1000.0
        st.metric("–î–∏—Å—Ç–∞–Ω—Ü–∏—è", f"{dist_km:.2f} –∫–º" if dist_km else "‚Äî")
    with col2:
        if not df_ses.empty and pd.notna(df_ses.iloc[0].get("total_timer_time_s")):
            mins = df_ses.iloc[0]["total_timer_time_s"] / 60.0
        elif not df_rec.empty and df_rec["t_rel_s"].notna().any():
            mins = (df_rec["t_rel_s"].max() - df_rec["t_rel_s"].min()) / 60.0
        else:
            mins = None
        st.metric("–í—Ä–µ–º—è", f"{mins:.1f} –º–∏–Ω" if mins else "‚Äî")
    with col3:
        st.metric("TRIMP (‚âà)", f"{trimp:.0f}" if trimp else "‚Äî")

    col4, col5, col6 = st.columns(3)
    with col4:
        st.metric("EF (—Å–∫–æ—Ä–æ—Å—Ç—å/HR)", f"{ef:.4f}" if ef else "‚Äî")
    with col5:
        st.metric("Decoupling Pa:Hr", f"{de:.1f}%" if de is not None else "‚Äî")
    with col6:
        if not df_ses.empty and pd.notna(df_ses.iloc[0].get("avg_hr")):
            st.metric("–°—Ä–µ–¥–Ω–∏–π HR", int(df_ses.iloc[0]["avg_hr"]))
        else:
            st.metric("–°—Ä–µ–¥–Ω–∏–π HR", "‚Äî")

    st.divider()

    # ---------- charts ----------
    if not df_rec.empty:
        left, right = st.columns(2)
        with left:
            st.subheader("–ü—É–ª—å—Å –∏ —Ç–µ–º–ø")
            base = pd.DataFrame({
                "t_min": df_rec["t_rel_s"] / 60.0,
                "HR": df_rec["hr"],
                "Pace (–º–∏–Ω/–∫–º)": pd.to_numeric(df_rec["speed"].apply(speed_to_pace_min_per_km), errors="coerce")
            })
            hr_line = alt.Chart(base).mark_line().encode(x="t_min:Q", y="HR:Q")
            pace_line = alt.Chart(base).mark_line().encode(x="t_min:Q", y=alt.Y("Pace (–º–∏–Ω/–∫–º):Q", sort="descending"))
            st.altair_chart(hr_line.interactive(), use_container_width=True)
            st.altair_chart(pace_line.interactive(), use_container_width=True)
        with right:
            st.subheader("–ö–∞–¥–µ–Ω—Å –∏ –≤—ã—Å–æ—Ç–∞")
            base2 = pd.DataFrame({
                "t_min": df_rec["t_rel_s"] / 60.0,
                "Cadence (spm)": df_rec["cadence"],
                "Elevation (m)": df_rec["elev"],
            })
            st.altair_chart(alt.Chart(base2).mark_line().encode(x="t_min:Q", y="Cadence (spm):Q").interactive(), use_container_width=True)
            st.altair_chart(alt.Chart(base2).mark_line().encode(x="t_min:Q", y="Elevation (m):Q").interactive(), use_container_width=True)

    # ---------- zones ----------
    st.subheader("–ó–æ–Ω—ã –ø—É–ª—å—Å–∞")
    if zt is not None:
        df_z = zt.rename_axis("Zone").reset_index(name="seconds")
        total = df_z["seconds"].sum()
        df_z["%"] = (df_z["seconds"] / total * 100).round(1)
        st.dataframe(df_z)
    else:
        st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö HR –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –∑–æ–Ω.")

    # ---------- interval compliance ----------
    st.subheader("Interval Compliance")
    def friendly_target_row(t_type, lo, hi):
        if t_type == "heart_rate":
            return f"HR {int(lo)}‚Äì{int(hi)} bpm" if (lo and hi) else None
        if t_type == "speed":  # –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ —Ç–µ–º–ø
            def f(x): 
                return pace_from_speed(x) if x and x>0 else "‚Äî"
            return f"Pace {f(hi)}‚Äì{f(lo)} (–º–∏–Ω/–∫–º)" if (lo and hi) else None  # –≤–Ω–∏–º–∞–Ω–∏–µ: speed‚Üë => pace‚Üì
        if t_type == "power":
            return f"Power {int(lo)}‚Äì{int(hi)} W" if (lo and hi) else None
        return None

    comp_rows = []
    if not df_laps.empty:
        # –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –ª–∞–ø
        lap_bounds = []
        for i, r in df_laps.iterrows():
            start = r["start_time"]
            if i < len(df_laps)-1:
                end = df_laps.loc[i+1, "start_time"]
            else:
                end = df_rec["timestamp"].max() if not df_rec.empty else (start + pd.Timedelta(seconds=r.get("total_timer_time_s") or 0))
            lap_bounds.append((start, end))
        # —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º —Å workout_steps –ø–æ –∏–Ω–¥–µ–∫—Å—É (–ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ)
        for i, (start, end) in enumerate(lap_bounds):
            step = df_steps.iloc[i] if (not df_steps.empty and i < len(df_steps)) else None
            t_mask = (df_rec["timestamp"] >= start) & (df_rec["timestamp"] < end) if not df_rec.empty else None
            seg = df_rec.loc[t_mask] if (t_mask is not None and t_mask.any()) else pd.DataFrame(columns=df_rec.columns)

            t_type = None; lo = hi = None
            if step is not None and pd.notna(step.get("target_type")):
                t_type = str(step["target_type"])
                lo = step.get("custom_target_value_low")
                hi = step.get("custom_target_value_high")
                # —É Garmin –¥–ª—è speed —ç—Ç–æ –º/—Å, –¥–ª—è HR ‚Äî bpm, –¥–ª—è power ‚Äî W (–æ–±—ã—á–Ω–æ)
            # –µ—Å–ª–∏ —Ü–µ–ª–µ–π –Ω–µ—Ç ‚Äî –º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å ¬´—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º–ø–∞/HR¬ª –∫–∞–∫ —Å—É—Ä—Ä–æ–≥–∞—Ç
            in_target_pct = None
            if t_type in ("heart_rate", "speed", "power") and not seg.empty and lo and hi:
                metric = None
                if t_type == "heart_rate": metric = "hr"
                elif t_type == "speed":    metric = "speed"
                elif t_type == "power":    metric = "power"
                v = seg[metric]
                dt = seg["dt_s"].replace(0, 1.0)  # –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω—É–ª–µ–π
                inrange = (v >= lo) & (v <= hi)
                if inrange.any():
                    in_target_pct = round(100.0 * (dt[inrange].sum() / dt.sum()), 1)
            elif not seg.empty:
                # —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω–∞—è ¬´—Ä–æ–≤–Ω–æ—Å—Ç—å —Ç–µ–º–ø–∞¬ª ‚Äî —á–µ–º –º–µ–Ω—å—à–µ std(pace), —Ç–µ–º –ª—É—á—à–µ (–ø—Ä–∏–≤–æ–¥–∏–º –∫ 0‚Äì100)
                pace_min = seg["speed"].apply(speed_to_pace_min_per_km)
                var = float(np.nanstd(pace_min))
                in_target_pct = max(0, 100 - min(100, var * 30)) if not np.isnan(var) else None

            comp_rows.append({
                "lap": i+1,
                "start_time": start,
                "duration_s": round((end-start).total_seconds(), 1) if (pd.notna(start) and pd.notna(end)) else None,
                "target": friendly_target_row(t_type, lo, hi) if t_type else "(–Ω–µ—Ç —Ü–µ–ª–∏)",
                "avg_pace": pace_from_speed(df_laps.loc[i,"avg_speed_m_s"]) if pd.notna(df_laps.loc[i,"avg_speed_m_s"]) else None,
                "avg_hr": int(df_laps.loc[i,"avg_hr"]) if pd.notna(df_laps.loc[i,"avg_hr"]) else None,
                "compliance_%": in_target_pct
            })
    df_comp = pd.DataFrame(comp_rows)
    if not df_comp.empty:
        st.dataframe(df_comp)
    else:
        st.write("–ù–µ—Ç –ª–∞–ø –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")

    # ---------- coach notes (rule-based) ----------
    st.subheader("Coach Notes")
    notes = []

    # 1) decoupling
    if de is not None:
        if de >= 8:
            notes.append("–í—ã—Å–æ–∫–∏–π Pa:Hr (‚âà‚â•8%). –ü–æ—Ö–æ–∂–µ –Ω–∞ —É—Ç–æ–º–ª–µ–Ω–∏–µ/–∂–∞—Ä—É/–Ω–µ–¥–æ—Å–æ–Ω ‚Äî —Å–Ω–∏–∑—å –æ–±—ä—ë–º –∏–ª–∏ –±–µ–≥–∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º Z2.")
        elif de >= 5:
            notes.append("–£–º–µ—Ä–µ–Ω–Ω—ã–π Pa:Hr (5‚Äì8%). –°–ª–µ–¥–∏ –∑–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–µ–π –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö.")

    # 2) zones balance
    if zt is not None and not zt.empty:
        total_s = zt.sum()
        z1z2 = (zt.iloc[0:2].sum() / total_s) * 100 if len(zt) >= 2 else None
        if z1z2 is not None and z1z2 < 60:
            notes.append("–ú–∞–ª–æ –ª—ë–≥–∫–æ–π —Ä–∞–±–æ—Ç—ã (Z1‚ÄìZ2 <60%). –î–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ–±–∞–≤—å —Å–ø–æ–∫–æ–π–Ω—ã—Ö –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤.")
        z5p = (zt.iloc[-1] / total_s) * 100 if len(zt) >= 5 else None
        if z5p is not None and z5p > 15:
            notes.append("–ú–Ω–æ–≥–æ –≤—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã (>15% Z5). –î–∞–π —Ç–µ–ª—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è 1‚Äì2 –¥–Ω—è.")

    # 3) easy too hot
    if not df_ses.empty and pd.notna(df_ses.iloc[0].get("avg_hr")):
        thr = hr_rest + 0.7 * (hr_max - hr_rest)  # –æ—Ä–∏–µ–Ω—Ç–∏—Ä –≥—Ä–∞–Ω–∏—Ü—ã –∞—ç—Ä–æ–±–Ω–æ–π
        if df_ses.iloc[0]["avg_hr"] > thr:
            notes.append("–°—Ä–µ–¥–Ω–∏–π HR –≤—ã—à–µ —Ä–∞–∑—É–º–Ω–æ–π –∑–æ–Ω—ã –¥–ª—è –ª—ë–≥–∫–æ–π –ø—Ä–æ–±–µ–∂–∫–∏. –ü—Ä–∏—Ç–æ—Ä–º–æ–∑–∏ –Ω–∞ easy, –¥–µ—Ä–∂–∏ –¥—ã—Ö–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º.")

    # 4) compliance hint
    if not df_comp.empty and df_comp["compliance_%"].notna().any():
        low = df_comp["compliance_%"].dropna()
        if (low < 70).any():
            notes.append("–ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å –Ω–∏–∑–∫–∏–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ–º –≤ —Ü–µ–ª—å (<70%). –°—É–∑—å –∫–æ—Ä–∏–¥–æ—Ä —Ü–µ–ª–µ–π –∏–ª–∏ —É–±–µ—Ä–∏ –≤–Ω–µ—à–Ω–∏–µ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª–∏ (–≤–µ—Ç–µ—Ä, –ø–æ–¥—ä–µ–º—ã).")

    if notes:
        for n in notes:
            st.write("‚Ä¢ " + n)
    else:
        st.write("–û—Ç–ª–∏—á–Ω–æ! –ù–∞—Ä—É—à–µ–Ω–∏–π —Ä–∏—Ç–º–∞ –∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∞ –Ω–µ –≤–∏–¥–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üí™")

    # ---------- details ----------
    st.subheader("–°–µ—Å—Å–∏—è")
    st.dataframe(df_ses if not df_ses.empty else pd.DataFrame(columns=["‚Äî"]))

    st.subheader("–ö—Ä—É–≥–∏ (laps)")
    st.dataframe(df_laps if not df_laps.empty else pd.DataFrame(columns=["‚Äî"]))

    st.subheader("–¢–æ—á–∫–∏ (records) ‚Äî –±–µ–∑ GPS")
    st.dataframe(df_rec.head(500) if not df_rec.empty else pd.DataFrame(columns=["‚Äî"]))
    if not df_rec.empty and len(df_rec) > 500:
        st.caption(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 500 —Å—Ç—Ä–æ–∫ –∏–∑ {len(df_rec)}.")

    # ---------- download ----------
    xls = to_excel({
        "Summary": pd.DataFrame([{
            "distance_km": (dist_km if dist_km else None),
            "time_min": (mins if mins else None),
            "TRIMP": (round(trimp) if trimp else None),
            "EF": (float(ef) if ef else None),
            "Pa:Hr_%": (float(de) if de is not None else None),
            "hr_rest": hr_rest, "hr_max": hr_max
        }]),
        "Sessions": df_ses,
        "Laps": df_laps,
        "Records": df_rec,
        "Compliance": df_comp
    })
    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel", data=xls,
        file_name="fit_report.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

else:
    st.info("–ó–∞–≥—Ä—É–∑–∏ .fit —Ñ–∞–π–ª —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç—á—ë—Ç.")
