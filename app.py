# app.py ‚Äî CapyRun FIT Analyzer (modular)
# - Auth + Profile –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ auth.py –∏ profile.py
# - –•–µ–ª–ø–µ—Ä—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ utils.py
# - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ë–î (db.py)
# - –û—Ç—á—ë—Ç –ø–æ –æ–¥–Ω–æ–º—É .fit, –¥–∞—à–±–æ—Ä–¥ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º, –ø–ª–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π, —ç–∫—Å–ø–æ—Ä—Ç –≤ .ics –∏ Excel

import pandas as pd
import altair as alt
import streamlit as st
from fitparse import FitFile
import datetime as dt

# --- –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ ---
from auth import get_supabase, auth_sidebar
from profile import load_or_init_profile, profile_sidebar
from db import save_workouts, fetch_workouts
from utils import (
    get_val,
    pace_from_speed,
    speed_to_pace_min_per_km,
    format_duration,
    parse_bounds,
    compute_trimp_timeweighted,
    efficiency_factor,
    decoupling,
    zones_time,
    to_excel,
    ewma_daily,
    build_ics,
)

# =========================================================
# UI
# =========================================================
st.set_page_config(page_title="CapyRun ‚Äî FIT Analyzer", page_icon="üèÉ", layout="wide")
st.title("üèÉ CapyRun ‚Äî FIT Analyzer")
st.caption("–ó–∞–≥—Ä—É–∑–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ .fit ‚Üí –æ—Ç—á—ë—Ç / –ø—Ä–æ–≥—Ä–µ—Å—Å / –ø–ª–∞–Ω + –∫–∞–ª–µ–Ω–¥–∞—Ä—å (ICS) + Excel")

# Supabase –∫–ª–∏–µ–Ω—Ç
supabase = get_supabase()

# Sidebar: auth + profile
# Sidebar: auth + profile
with st.sidebar:
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    user = auth_sidebar(supabase)
    if not user:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ + stop()
        st.stop()

    # 2) –ü—Ä–æ—Ñ–∏–ª—å –∞—Ç–ª–µ—Ç–∞ (HR/zones) ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –∏ UI
    profile_row = load_or_init_profile(supabase, user.id)
    hr_rest, hr_max, zone_bounds_text = profile_sidebar(supabase, user, profile_row)

uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ FIT-—Ñ–∞–π–ª(—ã)", type=["fit"], accept_multiple_files=True)

# =========================================================
# Parsing logic
# =========================================================
def parse_fit_file(uploaded_file, hr_rest: int, hr_max: int):
    """–í–µ—Ä–Ω—ë—Ç df_rec, df_laps, df_ses, summary (—Å time_s, time_min, time_hms)."""
    fit = FitFile(uploaded_file)

    # Records
    rec_rows = []
    for m in fit.get_messages("record"):
        rec_rows.append({
            "timestamp": get_val(m, "timestamp"),
            "hr":        get_val(m, "heart_rate"),
            "speed":     get_val(m, "speed", "enhanced_speed"),  # m/s
            "cadence":   get_val(m, "cadence"),
            "power":     get_val(m, "power"),
            "elev":      get_val(m, "altitude", "enhanced_altitude"),
            "dist":      get_val(m, "distance"),                 # meters (cumulative)
        })
    df_rec = pd.DataFrame(rec_rows)
    if not df_rec.empty:
        df_rec["timestamp"] = pd.to_datetime(df_rec["timestamp"], errors="coerce")
        df_rec = df_rec.sort_values("timestamp").reset_index(drop=True)
        if df_rec["timestamp"].notna().any():
            t0 = df_rec["timestamp"].min()
            df_rec["t_rel_s"] = (df_rec["timestamp"] - t0).dt.total_seconds()
        else:
            df_rec["t_rel_s"] = range(len(df_rec))
        df_rec["dt_s"] = pd.Series(df_rec["t_rel_s"]).diff().fillna(0).clip(lower=0)
        df_rec["pace"] = df_rec["speed"].apply(pace_from_speed)

    # Laps
    lap_rows = []
    for m in fit.get_messages("lap"):
        lap_rows.append({
            "start_time": get_val(m, "start_time"),
            "total_distance_m": get_val(m, "total_distance"),
            "total_timer_time_s": get_val(m, "total_timer_time"),
            "avg_hr": get_val(m, "avg_heart_rate"),
            "max_hr": get_val(m, "max_heart_rate"),
            "avg_speed_m_s": get_val(m, "avg_speed", "enhanced_avg_speed"),
            "max_speed_m_s": get_val(m, "max_speed", "enhanced_max_speed"),
            "avg_cadence": get_val(m, "avg_cadence"),
            "total_ascent_m": get_val(m, "total_ascent"),
            "total_descent_m": get_val(m, "total_descent"),
            "lap_trigger": get_val(m, "lap_trigger"),
        })
    df_laps = pd.DataFrame(lap_rows)
    if not df_laps.empty:
        df_laps["start_time"] = pd.to_datetime(df_laps["start_time"], errors="coerce")
        df_laps = df_laps.sort_values("start_time").reset_index(drop=True)

    # Sessions
    ses_rows = []
    for m in fit.get_messages("session"):
        ses_rows.append({
            "start_time": get_val(m, "start_time"),
            "sport": get_val(m, "sport"),
            "sub_sport": get_val(m, "sub_sport"),
            "total_distance_m": get_val(m, "total_distance"),
            "total_elapsed_time_s": get_val(m, "total_elapsed_time"),
            "total_timer_time_s": get_val(m, "total_timer_time"),
            "avg_hr": get_val(m, "avg_heart_rate"),
            "max_hr": get_val(m, "max_heart_rate"),
            "avg_speed_m_s": get_val(m, "avg_speed", "enhanced_avg_speed"),
            "max_speed_m_s": get_val(m, "max_speed", "enhanced_max_speed"),
            "avg_cadence": get_val(m, "avg_cadence"),
            "total_ascent_m": get_val(m, "total_ascent"),
            "total_descent_m": get_val(m, "total_descent"),
        })
    df_ses = pd.DataFrame(ses_rows)

    # Summary per workout
    start_time = None
    if not df_ses.empty and pd.notna(df_ses.iloc[0].get("start_time")):
        start_time = pd.to_datetime(df_ses.iloc[0]["start_time"])
    elif not df_rec.empty and df_rec["timestamp"].notna().any():
        start_time = df_rec["timestamp"].min()

    # distance
    if not df_ses.empty and pd.notna(df_ses.iloc[0].get("total_distance_m")):
        distance_km = df_ses.iloc[0]["total_distance_m"] / 1000.0
    elif not df_rec.empty and df_rec["dist"].notna().any():
        distance_km = df_rec["dist"].max() / 1000.0
    else:
        distance_km = None

    # duration
    if not df_ses.empty and pd.notna(df_ses.iloc[0].get("total_timer_time_s")):
        time_s = float(df_ses.iloc[0]["total_timer_time_s"])
    elif not df_rec.empty and "t_rel_s" in df_rec and pd.notna(df_rec["t_rel_s"]).any():
        time_s = float(df_rec["t_rel_s"].max() - df_rec["t_rel_s"].min())
    else:
        time_s = None
    time_min = (time_s / 60.0) if (time_s is not None) else None
    time_hms = format_duration(time_s) if time_s is not None else None

    # avg hr
    if not df_ses.empty and pd.notna(df_ses.iloc[0].get("avg_hr")):
        avg_hr = float(df_ses.iloc[0]["avg_hr"])
    elif not df_rec.empty and pd.notna(df_rec["hr"]).any():
        avg_hr = float(pd.Series(df_rec["hr"]).mean())
    else:
        avg_hr = None

    # TRIMP
    trimp = compute_trimp_timeweighted(
        df_rec["hr"] if "hr" in df_rec else None,
        df_rec["dt_s"] if "dt_s" in df_rec else None,
        hr_rest, hr_max
    )

    # EF / Decoupling
    ef = efficiency_factor(df_rec["speed"] if "speed" in df_rec else None,
                           df_rec["hr"] if "hr" in df_rec else None)
    de = decoupling(df_rec["speed"] if "speed" in df_rec else None,
                    df_rec["hr"] if "hr" in df_rec else None)

    summary = {
        "start_time": start_time,
        "date": start_time.date() if start_time else None,
        "sport": (df_ses.iloc[0]["sport"] if not df_ses.empty else None),
        "distance_km": round(distance_km, 2) if distance_km else None,
        "time_s": round(time_s) if time_s is not None else None,
        "time_min": round(time_min, 1) if time_min is not None else None,
        "time_hms": time_hms,
        "avg_hr": int(round(avg_hr)) if avg_hr else None,
        "TRIMP": int(round(trimp)) if trimp else None,
        "EF": round(ef, 4) if ef else None,
        "Pa:Hr_%": round(de, 1) if de is not None else None,
    }

    return df_rec, df_laps, df_ses, summary

# =========================================================
# Main logic
# =========================================================
if not uploaded:
    st.info("–ó–∞–≥—Ä—É–∑–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ .fit —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç—á—ë—Ç/–ø—Ä–æ–≥—Ä–µ—Å—Å.")
else:
    # ---------------- –û–¥–∏–Ω —Ñ–∞–π–ª ----------------
    if len(uploaded) == 1:
        f = uploaded[0]
        df_rec, df_laps, df_ses, summary = parse_fit_file(f, hr_rest, hr_max)

        bounds = parse_bounds(zone_bounds_text)
        zt = zones_time(df_rec["hr"], bounds) if (not df_rec.empty and bounds) else None

        # KPIs
        c1, c2, c3 = st.columns(3)
        with c1:
            st.metric("–î–∏—Å—Ç–∞–Ω—Ü–∏—è", f"{summary['distance_km']:.2f} –∫–º" if summary["distance_km"] else "‚Äî")
        with c2:
            st.metric("–í—Ä–µ–º—è", summary["time_hms"] or (f"{summary['time_min']:.1f} –º–∏–Ω" if summary["time_min"] else "‚Äî"))
        with c3:
            st.metric("TRIMP (‚âà)", f"{summary['TRIMP']}" if summary["TRIMP"] else "‚Äî")

        c4, c5, c6 = st.columns(3)
        with c4:
            st.metric("EF (—Å–∫–æ—Ä–æ—Å—Ç—å/HR)", f"{summary['EF']}" if summary["EF"] else "‚Äî")
        with c5:
            st.metric("Decoupling Pa:Hr", f"{summary['Pa:Hr_%']}%" if summary["Pa:Hr_%"] is not None else "‚Äî")
        with c6:
            st.metric("–°—Ä–µ–¥–Ω–∏–π HR", f"{summary['avg_hr']}" if summary["avg_hr"] else "‚Äî")

        st.divider()

        # Charts
        if not df_rec.empty:
            left, right = st.columns(2)
            with left:
                st.subheader("–ü—É–ª—å—Å –∏ —Ç–µ–º–ø")
                base = pd.DataFrame({
                    "t_min": pd.Series(df_rec["t_rel_s"]) / 60.0,
                    "HR": df_rec["hr"],
                    "Pace (–º–∏–Ω/–∫–º)": pd.to_numeric(pd.Series(df_rec["speed"]).apply(speed_to_pace_min_per_km), errors="coerce")
                })
                st.altair_chart(alt.Chart(base).mark_line().encode(x="t_min:Q", y="HR:Q").interactive(), use_container_width=True)
                st.altair_chart(alt.Chart(base).mark_line().encode(x="t_min:Q", y=alt.Y("Pace (–º–∏–Ω/–∫–º):Q", sort="descending")).interactive(), use_container_width=True)
            with right:
                st.subheader("–ö–∞–¥–µ–Ω—Å –∏ –≤—ã—Å–æ—Ç–∞")
                base2 = pd.DataFrame({
                    "t_min": pd.Series(df_rec["t_rel_s"]) / 60.0,
                    "Cadence (spm)": df_rec["cadence"],
                    "Elevation (m)": df_rec["elev"],
                })
                st.altair_chart(alt.Chart(base2).mark_line().encode(x="t_min:Q", y="Cadence (spm):Q").interactive(), use_container_width=True)
                st.altair_chart(alt.Chart(base2).mark_line().encode(x="t_min:Q", y="Elevation (m):Q").interactive(), use_container_width=True)

        # Zones
        st.subheader("–ó–æ–Ω—ã –ø—É–ª—å—Å–∞")
        if zt is not None:
            df_z = zt.rename_axis("Zone").reset_index(name="seconds")
            total = df_z["seconds"].sum()
            df_z["%"] = (df_z["seconds"] / total * 100).round(1)
            st.dataframe(df_z)
        else:
            st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö HR –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –∑–æ–Ω.")

        # Tables
        st.subheader("–°–µ—Å—Å–∏—è")
        st.dataframe(df_ses if not df_ses.empty else pd.DataFrame(columns=["‚Äî"]))
        st.subheader("–ö—Ä—É–≥–∏ (laps)")
        st.dataframe(df_laps if not df_laps.empty else pd.DataFrame(columns=["‚Äî"]))
        st.subheader("–¢–æ—á–∫–∏ (records) ‚Äî –±–µ–∑ GPS")
        st.dataframe(df_rec.head(500) if not df_rec.empty else pd.DataFrame(columns=["‚Äî"]))
        if not df_rec.empty and len(df_rec) > 500:
            st.caption(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 500 —Å—Ç—Ä–æ–∫ –∏–∑ {len(df_rec)}.")

        # Downloads
        xls = to_excel({
            "Summary": pd.DataFrame([summary]),
            "Sessions": df_ses,
            "Laps": df_laps,
            "Records": df_rec
        })
        st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel", data=xls,
                           file_name="fit_report.xlsx",
                           mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

        # Save to DB
        if st.button("üì¶ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é"):
            save_workouts(supabase, user.id, [summary])
            st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")

    # ---------------- –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ ----------------
    else:
        st.subheader("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: —Å–≤–æ–¥–∫–∞ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º")
        summaries = []
        for f in uploaded:
            df_rec, df_laps, df_ses, summary = parse_fit_file(f, hr_rest, hr_max)
            summaries.append(summary)

        df_sum = pd.DataFrame(summaries).dropna(subset=["date"]).sort_values("start_time").reset_index(drop=True)
        if df_sum.empty:
            st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤.")
            st.stop()

        df_sum["date"] = pd.to_datetime(df_sum["date"]).dt.normalize()
        if "time_s" in df_sum.columns:
            df_sum["time_hms"] = df_sum["time_s"].apply(format_duration)

        st.dataframe(df_sum)

        # Daily load + ATL/CTL/TSB
        st.subheader("–ù–∞–≥—Ä—É–∑–∫–∞ (TRIMP) –ø–æ –¥–Ω—è–º –∏ —Ç—Ä–µ–Ω–¥—ã ATL/CTL/TSB")
        daily = df_sum.groupby("date").agg(
            TRIMP=("TRIMP", "sum"),
            distance_km=("distance_km", "sum")
        ).reset_index()

        full = pd.DataFrame({"date": pd.date_range(df_sum["date"].min(), df_sum["date"].max(), freq="D")})
        daily = full.merge(daily, on="date", how="left").fillna({"TRIMP": 0.0, "distance_km": 0.0})

        daily["ATL"] = ewma_daily(daily["TRIMP"].values, tau_days=7)
        daily["CTL"] = ewma_daily(daily["TRIMP"].values, tau_days=42)
        daily["TSB"] = daily["CTL"] - daily["ATL"]

        base = daily.melt(id_vars="date", value_vars=["TRIMP","ATL","CTL","TSB"], var_name="metric", value_name="value")
        chart = alt.Chart(base).mark_line().encode(x="date:T", y="value:Q", color="metric:N").interactive()
        st.altair_chart(chart, use_container_width=True)

        last7 = daily.tail(7)
        c1, c2, c3, c4 = st.columns(4)
        with c1:
            st.metric("TRIMP 7–¥", f"{last7['TRIMP'].sum():.0f}")
        with c2:
            st.metric("DIST 7–¥", f"{last7['distance_km'].sum():.1f} –∫–º")
        with c3:
            st.metric("ATL (—Å–µ–≥–æ–¥–Ω—è)", f"{daily['ATL'].iloc[-1]:.0f}")
        with c4:
            st.metric("TSB (—Å–µ–≥–æ–¥–Ω—è)", f"{daily['TSB'].iloc[-1]:.0f}")

        # Plan for next week
        st.subheader("üìù –ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–ª–∞–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")
        plan_df = pd.DataFrame()
        note = None
        if not daily.empty and not last7.empty:
            last_week_km = float(last7["distance_km"].sum())
            tsb_now = float(daily["TSB"].iloc[-1])

            if tsb_now < -10:
                target_km = max(0.0, last_week_km * 0.9)
                note = "TSB –Ω–∏–∑–∫–∏–π ‚Üí —Å–Ω–∏–∑–∏–º –æ–±—ä—ë–º (~-10%) –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."
            elif tsb_now > 10:
                target_km = last_week_km * 1.10
                note = "TSB –≤—ã—Å–æ–∫–∏–π ‚Üí –º–æ–∂–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–¥–Ω—è—Ç—å –æ–±—ä—ë–º (~+10%)."
            else:
                target_km = last_week_km * 1.05
                note = "TSB –≤ –Ω–æ—Ä–º–µ ‚Üí –ø–æ–¥–¥–µ—Ä–∂–∏–º/—Å–ª–µ–≥–∫–∞ —É–≤–µ–ª–∏—á–∏–º (~+5%)."

            dist_split = pd.Series([0.12,0.16,0.10,0.18,0.08,0.26,0.10])  # –ü–Ω..–í—Å
            day_names = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
            km_plan = (dist_split * target_km).round(1)
            types = ["Easy Z1‚ÄìZ2", "Tempo Z3 (20‚Äì30 –º–∏–Ω)", "Easy Z1‚ÄìZ2",
                     "Intervals Z4 (6√ó3‚Äô/2‚Äô)", "Recovery 30‚Äì40‚Äô Z1", "Long Z2", "Easy + strides"]

            plan_df = pd.DataFrame({"–î–µ–Ω—å": day_names, "–¢–∏–ø": types, "–ü—Ä–æ–±–µ–∂–∫–∞ (–∫–º)": km_plan})
            if note:
                st.write(note)
            st.dataframe(plan_df)
        else:
            st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ (–Ω—É–∂–Ω–æ ‚â•1 –¥–µ–Ω—å —Å –¥–∞–Ω–Ω—ã–º–∏).")

        # ICS export
        with st.expander("üìÜ –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å (.ics)"):
            if plan_df.empty:
                st.warning("–ü–ª–∞–Ω –ø—É—Å—Ç ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π –µ–≥–æ –≤—ã—à–µ.")
            else:
                today = dt.date.today()
                next_monday = today + dt.timedelta(days=(7 - today.weekday())) if today.weekday() != 0 else today
                start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–ª–∞–Ω–∞", value=next_monday)
                workout_time = st.time_input("–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", value=dt.time(7, 0))
                selected_days = st.multiselect("–ö–∞–∫–∏–µ –¥–Ω–∏ –¥–æ–±–∞–≤–∏—Ç—å",
                                               options=["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"],
                                               default=["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"])
                duration_minutes = st.number_input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è (–º–∏–Ω)", 15, 240, 60, 5)

                # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª–æ–∫–∞—Ü–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                location = st.text_input("–õ–æ–∫–∞—Ü–∏—è (–æ–ø—Ü.)", value="")
                alert_min = st.number_input("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –º–∏–Ω –¥–æ —Å—Ç–∞—Ä—Ç–∞", 0, 1440, 15, 5)

                ics_text = build_ics(
                    plan_df=plan_df,
                    start_date=start_date,
                    workout_time=workout_time,
                    selected_days=selected_days,
                    duration_minutes=duration_minutes,
                    location=location,
                    alert_minutes=int(alert_min) if alert_min else 0,
                )
                st.download_button("üì• –°–∫–∞—á–∞—Ç—å iCal (.ics)", data=ics_text, file_name="capyrun_plan.ics", mime="text/calendar")

        # Excel export
        xls = to_excel({"Workouts": df_sum, "DailyLoad": daily, "NextWeekPlan": plan_df})
        st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel (–ø—Ä–æ–≥—Ä–µ—Å—Å + –ø–ª–∞–Ω)", data=xls,
                           file_name="capyrun_progress.xlsx",
                           mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

        # Save all to DB
        if st.button("üì¶ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"):
            save_workouts(supabase, user.id, summaries)
            st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")

        # History from DB
        with st.expander("üìö –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"):
            df_hist = fetch_workouts(supabase, user.id, limit=100)
            if not df_hist.empty:
                df_hist = df_hist.copy()
                if "time_s" in df_hist.columns:
                    df_hist["–≤—Ä–µ–º—è"] = df_hist["time_s"].apply(format_duration)
                st.dataframe(df_hist)
            else:
                st.write("–ü–æ–∫–∞ –ø—É—Å—Ç–æ.")
