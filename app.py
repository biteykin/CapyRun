# app.py ‚Äî CapyRun (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä)
import streamlit as st
from typing import Any
import pandas as pd
# –≤–º–µ—Å—Ç–æ: from db_workouts import list_workouts, save_workout, get_workout_by_id
try:
    from db_workouts import list_workouts, save_workout, get_workout_by_id
except Exception as e:
    import os, sys, traceback, streamlit as st
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å db_workouts ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—é –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ.")
    st.caption(f"cwd: {os.getcwd()}")
    try:
        st.caption("files: " + ", ".join(sorted(os.listdir(os.getcwd()))))
    except Exception:
        pass
    st.code("".join(traceback.format_exception(type(e), e, e.__traceback__)))
    st.stop()
from datetime import datetime

# –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from auth import get_supabase, auth_sidebar, account_block
from profile import load_or_init_profile, profile_sidebar
from landing import render_landing
from views_single import render_single_workout
from views_multi import render_multi_workouts

st.set_page_config(
    page_title="CapyRun ‚Äî FIT Analyzer",
    page_icon="üèÉ",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title("üèÉ CapyRun ‚Äî FIT Analyzer")
st.caption("–ó–∞–≥—Ä—É–∑–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ .fit ‚Üí –æ—Ç—á—ë—Ç / –ø—Ä–æ–≥—Ä–µ—Å—Å / –ø–ª–∞–Ω + –∫–∞–ª–µ–Ω–¥–∞—Ä—å (ICS) + Excel")

def _user_id(u: Any):
    return u.get("id") if isinstance(u, dict) else getattr(u, "id", None)

def _fmt_hhmmss(sec):
    try:
        sec = int(sec or 0)
        h = sec // 3600
        m = (sec % 3600) // 60
        s = sec % 60
        return f"{h:d}:{m:02d}:{s:02d}" if h else f"{m:d}:{s:02d}"
    except Exception:
        return "‚Äî"

def _fmt_km(meters):
    try:
        return f"{(float(meters or 0)/1000):.2f} –∫–º"
    except Exception:
        return "‚Äî"

def _fmt_pace_min_per_km(m_per_s):
    """–æ–∂–∏–¥–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –º/—Å ‚Üí –≤–µ—Ä–Ω—ë—Ç —Ç–µ–º–ø –º–∏–Ω/–∫–º; –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî '‚Äî'"""
    try:
        v = float(m_per_s or 0.0)
        if v <= 0:
            return "‚Äî"
        pace_sec = 1000.0 / v  # —Å–µ–∫ –Ω–∞ –∫–º
        m = int(pace_sec // 60)
        s = int(round(pace_sec % 60))
        return f"{m}:{s:02d}/–∫–º"
    except Exception:
        return "‚Äî"

def _get_query_params():
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö/–Ω–æ–≤—ã—Ö API Streamlit
    try:
        return dict(st.query_params)
    except Exception:
        return st.experimental_get_query_params()

def _set_query_params(**kwargs):
    try:
        st.query_params.update(kwargs)
    except Exception:
        st.experimental_set_query_params(**kwargs)

def render_workout_detail_view(supabase, user_id: str, workout_id: str):
    row = get_workout_by_id(supabase, workout_id=workout_id, user_id=user_id)
    if not row:
        st.error("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            _set_query_params()  # –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            st.rerun()
        return

    st.markdown("## üìÑ –î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")

    # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å: –Ω–∞–∑–≤–∞–Ω–∏–µ/–¥–∞—Ç–∞/—Å–ø–æ—Ä—Ç
    c1, c2, c3, c4 = st.columns([3, 2, 2, 2])
    with c1:
        st.markdown(f"**{row.get('filename','(–±–µ–∑ –∏–º–µ–Ω–∏)')}**")
        st.caption(f"id: `{row.get('id')}`")
    with c2:
        ts = row.get("uploaded_at") or row.get("created_at") or row.get("inserted_at")
        try:
            st.write(ts or "‚Äî")
        except Exception:
            st.write("‚Äî")
    with c3:
        st.write(row.get("sport") or "‚Äî")
    with c4:
        st.write(_fmt_km(row.get("distance_m")))

    st.divider()

    # –ë–ª–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ (–±–µ—Ä—ë–º –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ –∏/–∏–ª–∏ fit_summary)
    summ = row.get("fit_summary") or {}
    avg_hr = summ.get("avg_hr") or row.get("avg_hr")
    max_hr = summ.get("max_hr") or row.get("max_hr")
    avg_speed = summ.get("avg_speed_m_s") or summ.get("avg_speed")
    elev_gain = summ.get("elevation_gain") or summ.get("total_ascent")
    elev_loss = summ.get("elevation_loss") or summ.get("total_descent")
    calories = summ.get("calories") or row.get("calories")
    moving_time = row.get("moving_time_sec") or summ.get("moving_time_sec")
    duration = row.get("duration_sec") or summ.get("duration_sec")

    g1, g2, g3, g4, g5, g6 = st.columns(6)
    with g1:
        st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", _fmt_hhmmss(duration))
    with g2:
        st.metric("–î–∏—Å—Ç–∞–Ω—Ü–∏—è", _fmt_km(row.get("distance_m")))
    with g3:
        st.metric("–¢–µ–º–ø", _fmt_pace_min_per_km(avg_speed))
    with g4:
        st.metric("–ü—É–ª—å—Å —Å—Ä.", f"{int(avg_hr)}" if avg_hr else "‚Äî")
    with g5:
        st.metric("–ü—É–ª—å—Å –º–∞–∫—Å.", f"{int(max_hr)}" if max_hr else "‚Äî")
    with g6:
        st.metric("–ö–∞–ª–æ—Ä–∏–∏", f"{int(calories)}" if calories else "‚Äî")

    h1, h2 = st.columns(2)
    with h1:
        st.metric("–ù–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã", f"{int(elev_gain)} –º" if elev_gain else "‚Äî")
    with h2:
        st.metric("–ü–æ—Ç–µ—Ä—è –≤—ã—Å–æ—Ç—ã", f"{int(elev_loss)} –º" if elev_loss else "‚Äî")

    laps = summ.get("laps")
    if isinstance(laps, list) and laps:
        st.markdown("### Laps / –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã")
        import pandas as pd
        df_laps = pd.DataFrame(laps)
        st.dataframe(df_laps, use_container_width=True, hide_index=True)

    with st.expander("–ü–æ–ª–Ω—ã–π JSON (fit_summary)"):
        st.json(summ if isinstance(summ, dict) else {"fit_summary": summ})

    st.divider()
    if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
        _set_query_params()  # –æ—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä workout_id
        st.rerun()

supabase = get_supabase()

# --- –°–∞–π–¥–±–∞—Ä: —Ç–æ–ª—å–∫–æ auth + –ø—Ä–æ—Ñ–∏–ª—å (–ù–ò–ö–ê–ö–ò–• render_landing() –≤–Ω—É—Ç—Ä–∏!) ---
with st.sidebar:
    user = auth_sidebar(supabase, show_when_authed=False)
    if user:
        profile_row = load_or_init_profile(supabase, _user_id(user))
        hr_rest, hr_max, zone_bounds_text = profile_sidebar(supabase, user, profile_row)
        st.divider()
        account_block(supabase, user)

# --- –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî —Ä–∏—Å—É–µ–º –ª–µ–Ω–¥–∏–Ω–≥ –í –û–°–ù–û–í–ù–û–ô –û–ë–õ–ê–°–¢–ò –∏ –≤—ã—Ö–æ–¥–∏–º ---
if not user:
    render_landing()
    st.stop()

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏) ---
uid = _user_id(user)
if not uid:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id. –ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
    st.stop()

# ‚Äî‚Äî‚Äî —Ä–æ—É—Ç–∏–Ω–≥ –ø–æ query params ‚Äî‚Äî‚Äî
qp = _get_query_params()
selected_id = None
if isinstance(qp.get("workout_id"), list):
    selected_id = qp.get("workout_id")[0]
else:
    selected_id = qp.get("workout_id")

if selected_id:
    # –†–µ–∂–∏–º ¬´–¥–µ—Ç–∞–ª–∏¬ª
    render_workout_detail_view(supabase, user_id=uid, workout_id=selected_id)
else:
    # –†–µ–∂–∏–º ¬´—Å–ø–∏—Å–æ–∫¬ª
    st.markdown("### üèÉ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    try:
        _rows = list_workouts(supabase, user_id=uid, limit=50)
        if not _rows:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        else:
            # –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª
            import pandas as pd
            df = pd.DataFrame(_rows)
            if "distance_m" in df.columns:
                df["distance_km"] = (df["distance_m"].fillna(0) / 1000).round(2)
            # —Ä–∏—Å—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª
            for r in _rows:
                c1, c2, c3, c4, c5 = st.columns([4, 2, 2, 2, 2])
                with c1:
                    st.write(f"**{r.get('filename','(–±–µ–∑ –∏–º–µ–Ω–∏)')}**")
                    st.caption(f"id: `{r.get('id')}`")
                with c2:
                    st.write(r.get("sport") or "‚Äî")
                with c3:
                    st.write(_fmt_hhmmss(r.get("duration_sec")))
                with c4:
                    st.write(_fmt_km(r.get("distance_m")))
                with c5:
                    if st.button("–û—Ç–∫—Ä—ã—Ç—å", key=f"open_{r.get('id')}"):
                        _set_query_params(workout_id=r.get("id"))
                        st.rerun()
            st.divider()
    except Exception as e:
        import traceback
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–≤–æ–∑–º–æ–∂–Ω–æ, RLS/–ø–æ–ª–∏—Ç–∏–∫–∏ –∏–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞).")
        st.code("".join(traceback.format_exception_only(type(e), e)))

# 2) –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á—ë—Ç–æ–≤
uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ FIT-—Ñ–∞–π–ª(—ã)", type=["fit"], accept_multiple_files=True)

# –ö—ç—à–∏—Ä—É–µ–º –±–∞–π—Ç—ã —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
if uploaded_files:
    valid_files = [f for f in uploaded_files if f is not None and getattr(f, "size", 1) > 0]
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é: –∏–º—è + –±–∞–π—Ç—ã + —Ä–∞–∑–º–µ—Ä
    st.session_state["_uploads_cache"] = [
        {
            "name": f.name,
            "bytes": f.getvalue(),   # —Å–Ω–∏–º–∞–µ–º –∫–æ–ø–∏—é, –ø–æ–∫–∞ —Ñ–∞–π–ª —Ç–æ—á–Ω–æ –∂–∏–≤
            "size": len(f.getvalue())
        }
        for f in valid_files
    ]
else:
    valid_files = []
    st.session_state.pop("_uploads_cache", None)

if not uploaded_files:
    st.info("–ó–∞–≥—Ä—É–∑–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ .fit —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç—á—ë—Ç/–ø—Ä–æ–≥—Ä–µ—Å—Å.")
else:
    # Defensive: –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º None –∏ –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
    valid_files = [f for f in uploaded_files if f is not None and getattr(f, "size", 1) > 0]

    if not valid_files:
        st.warning("–§–∞–π–ª(—ã) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ .fit —Ñ–∞–π–ª—ã.")
    elif len(valid_files) == 1:
        # –û—Ç—á—ë—Ç –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        render_single_workout(
            file=valid_files[0],
            supabase=supabase,
            user_id=uid,
            hr_rest=hr_rest,
            hr_max=hr_max,
            zone_bounds_text=zone_bounds_text,
        )
    else:
        # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ñ–∞–π–ª–∞–º
        try:
            render_multi_workouts(
                files=valid_files,
                supabase=supabase,
                user_id=uid,
                hr_rest=hr_rest,
                hr_max=hr_max,
            )
        except ValueError as e:
            st.error(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–Ω–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã. "
                f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e}"
            )

# --- –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î" –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ---
st.markdown("#### üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –ë–î")
if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î"):
    saved, failed = 0, []
    cache = st.session_state.get("_uploads_cache") or []
    for item in cache:
        try:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —É–±–∏—Ä–∞–µ–º .select() –∏–∑ save_workout, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞
            ok, err, row = save_workout(
                supabase,
                user_id=uid,
                filename=item["name"],
                size_bytes=item["size"],
                parsed=None,  # —Å—é–¥–∞ –ø–æ–∑–∂–µ –ø–æ–¥—Å—Ç–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            )
            if ok:
                saved += 1
            else:
                failed.append(f"{item['name']}: {err}")
        except Exception as ex:
            failed.append(f"{item['name']}: {ex}")

    if saved:
        st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {saved}")
    if failed:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n- " + "\n- ".join(failed))

    st.rerun()  # —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ –Ω–∞–≤–µ—Ä—Ö—É –æ–±–Ω–æ–≤–∏–ª—Å—è