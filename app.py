# app.py ‚Äî CapyRun (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä)
import streamlit as st
from typing import Any
import pandas as pd
from db_workouts import list_workouts, save_workout, get_workout_by_id
from datetime import datetime

# –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from auth import get_supabase, auth_sidebar, account_block
from profile import load_or_init_profile, profile_sidebar
from landing import render_landing
from views_single import render_single_workout
from views_multi import render_multi_workouts

st.set_page_config(
    page_title="CapyRun ‚Äî FIT Analyzer",
    page_icon="üèÉ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# ===== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ (–Ω–µ–º–Ω–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞ –∏ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è) =====
st.markdown("""
<style>
  .block-container { padding-top: 1.2rem; padding-bottom: 2rem; }
  .stDataFrame { border-radius: 12px; overflow: hidden; }
</style>
""", unsafe_allow_html=True)

# ==== routing helpers ====
def get_route():
    try:
        qp = dict(st.query_params)
    except Exception:
        qp = st.experimental_get_query_params()
    page = qp.get("page"); sub = qp.get("sub")
    if isinstance(page, list): page = page[0]
    if isinstance(sub,  list): sub  = sub[0]
    return (page or "home"), (sub or None)

def set_route(page: str, sub: str = None, **extra):
    params = {"page": page}
    if sub: params["sub"] = sub
    if extra: params.update(extra)
    st.experimental_set_query_params(**params)

def user_display(user) -> str:
    for k in ("email","user_metadata","name","id"):
        try:
            if isinstance(user, dict):
                if k=="user_metadata" and "full_name" in user.get(k, {}): return user[k]["full_name"]
                if user.get(k): return str(user[k])
            else:
                v = getattr(user, k, None)
                if isinstance(v, dict) and "full_name" in v: return v["full_name"]
                if v: return str(v)
        except Exception: pass
    return "–ü—Ä–æ—Ñ–∏–ª—å"

def _user_id(u: Any):
    return u.get("id") if isinstance(u, dict) else getattr(u, "id", None)

def _fmt_hhmmss(sec):
    try:
        sec = int(sec or 0)
        h = sec // 3600
        m = (sec % 3600) // 60
        s = sec % 60
        return f"{h:d}:{m:02d}:{s:02d}" if h else f"{m:d}:{s:02d}"
    except Exception:
        return "‚Äî"

def _fmt_km(meters):
    try:
        return f"{(float(meters or 0)/1000):.2f} –∫–º"
    except Exception:
        return "‚Äî"

def _fmt_pace_min_per_km(m_per_s):
    """–æ–∂–∏–¥–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –º/—Å ‚Üí –≤–µ—Ä–Ω—ë—Ç —Ç–µ–º–ø –º–∏–Ω/–∫–º; –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî '‚Äî'"""
    try:
        v = float(m_per_s or 0.0)
        if v <= 0:
            return "‚Äî"
        pace_sec = 1000.0 / v  # —Å–µ–∫ –Ω–∞ –∫–º
        m = int(pace_sec // 60)
        s = int(round(pace_sec % 60))
        return f"{m}:{s:02d}/–∫–º"
    except Exception:
        return "‚Äî"

# ===== Subnav helper =====
def render_subnav(page: str, items: list[tuple[str,str]], current_sub: str | None):
    st.markdown("""
    <style>
      .cr-subnav{display:flex;gap:8px;margin:.25rem 0 1rem;}
      .cr-pill button{
        padding:6px 10px !important; border-radius:999px !important;
        background:transparent !important; border:1px solid rgba(0,0,0,0.1) !important;
      }
      .cr-pill button:hover{background:rgba(0,0,0,0.04) !important;}
      .cr-pill.active button{background:#111827 !important; color:#fff !important; border-color:rgba(0,0,0,0.25) !important;}
    </style>
    """, unsafe_allow_html=True)
    st.markdown('<div class="cr-subnav">', unsafe_allow_html=True)
    for sid, label in items:
        cls = "cr-pill active" if current_sub==sid else "cr-pill"
        st.markdown(f'<span class="{cls}">', unsafe_allow_html=True)
        if st.button(label, key=f"sub_{page}_{sid}"):
            set_route(page, sid); st.rerun()
        st.markdown('</span>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

supabase = get_supabase()

# --- Sidebar: ChatGPT-like navigation ---
with st.sidebar:
    # 1) —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
    user = auth_sidebar(supabase, show_when_authed=False)

    if user:
        # ===== ChatGPT-like sidebar CSS =====
        st.markdown("""
        <style>
          :root{
            --sb-bg:#0e0f13;
            --sb-border:rgba(255,255,255,.08);
            --fg:#e6e6e6;
            --fg-dim:#a7a7a7;
            --item-hover:rgba(255,255,255,.06);
            --item-active:rgba(255,255,255,.12);
          }
          section[data-testid="stSidebar"]{
            background:var(--sb-bg);
            border-right:1px solid var(--sb-border);
            font-size:14px; /* –∫–∞–∫ –≤ ChatGPT */
          }
          /* –ë—Ä–µ–Ω–¥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–≤–µ—Ä—Ö—É ‚Äî –∫–∞–∫ –ª–æ–≥–æ—Ç–∏–ø/–Ω–∞–∑–≤–∞–Ω–∏–µ –≤ ChatGPT */
          .gpt-brand{
            display:flex; align-items:center; gap:10px;
            font-weight:700; color:#fff; margin:8px 6px 10px;
          }
          .gpt-brand .logo{
            width:28px; height:28px; border-radius:8px;
            display:flex; align-items:center; justify-content:center;
            background:radial-gradient(120px 60px at 20% 20%, #ffffff14 10%, #ffffff08 40%, #0000 70%);
          }

          /* –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ (–ø–ª–æ—Å–∫–∏–π) */
          .gpt-list{ display:flex; flex-direction:column; gap:4px; margin:6px 4px; }

          /* –≠–ª–µ–º–µ–Ω—Ç ¬´–∫–∞–∫ —É ChatGPT¬ª: –ª—ë–≥–∫–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, —Ä–æ–≤–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã, –±–µ–∑ —Ä–∞–º–æ–∫ */
          .gpt-item{
            display:block; text-decoration:none; color:var(--fg);
            padding:10px 12px; border-radius:10px;
          }
          .gpt-item:hover{ background:var(--item-hover); }
          .gpt-item.active{ background:var(--item-active); color:#fff; }

          /* –ù–∏–∑: –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, –∫–∞–∫ —É ChatGPT */
          .gpt-footer{
            position:fixed; left:12px; right:12px; bottom:12px;
            display:flex; align-items:center; gap:10px;
            padding:10px; border-radius:12px;
            background:rgba(255,255,255,.03);
            border:1px solid var(--sb-border); color:var(--fg);
          }
          .gpt-ava{
            width:28px; height:28px; border-radius:50%;
            background:#202225; display:flex; align-items:center; justify-content:center;
            font-weight:700;
          }
          .gpt-name{ font-weight:600; }
          .gpt-logout button{
            padding:6px 10px !important; border-radius:10px !important;
            background:transparent !important; color:var(--fg) !important;
            border:1px solid var(--sb-border) !important;
          }
          .gpt-logout button:hover{ background:var(--item-hover) !important; color:#fff !important; }
        </style>
        """, unsafe_allow_html=True)

        # ===== –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –º–µ–Ω—é =====
        PAGE, SUB = get_route()
        L1 = [
            ("home",     "üè†", "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"),
            ("goals",    "üéØ", "–¶–µ–ª–∏"),
            ("plan",     "üìÖ", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω"),
            ("coach",    "üí¨", "–û–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º"),
            ("workouts", "üìã", "–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"),
            ("nutrition","üçΩÔ∏è", "–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è"),
            ("profile",  "üë§", "–ü—Ä–æ—Ñ–∏–ª—å"),
            ("badges",   "ü•á", "–ë–µ–π–¥–∂–∏ –∏ —Ä–µ–∫–æ—Ä–¥—ã"),
        ]
        L1_KEYS = {pid for pid,_,_ in L1}
        if PAGE not in L1_KEYS:
            PAGE, SUB = "home", None

        # ===== –±—Ä–µ–Ω–¥ –∏ —Å–ø–∏—Å–æ–∫
        st.markdown('<div class="gpt-brand"><div class="logo">üèÉ‚Äç‚ôÇÔ∏è</div><div>CapyRun</div></div>', unsafe_allow_html=True)
        st.markdown('<div class="gpt-list">', unsafe_allow_html=True)

        # –†–µ–Ω–¥–µ—Ä–∏–º —Å—Å—ã–ª–∫–∏ –∫–∞–∫ <a href="?page=..."> ‚Äî –∫–∞–∫ —É ChatGPT. –ù–∏–∫–∞–∫–∏—Ö –Ω–æ–≤—ã—Ö –≤–∫–ª–∞–¥–æ–∫.
        for pid, icon, label in L1:
            active_cls = "active" if PAGE == pid else ""
            href = f"?page={pid}"  # —Å—É–±—Ä–æ—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            st.markdown(f'<a class="gpt-item {active_cls}" href="{href}">{icon}  {label}</a>', unsafe_allow_html=True)

        st.markdown('</div>', unsafe_allow_html=True)

        # ===== –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π –Ω–∏–∑ (–∏–º—è + –∫–Ω–æ–ø–∫–∞ ¬´–í—ã–π—Ç–∏¬ª) =====
        uname = user_display(user)
        initials = (uname[:2] if uname else "U").upper()
        st.markdown(
            f'''
            <div class="gpt-footer">
              <div class="gpt-ava">{initials}</div>
              <div class="gpt-name">{uname}</div>
              <div style="flex:1;"></div>
              <div class="gpt-logout">
                <!-- –ö–Ω–æ–ø–∫—É —Ä–µ–Ω–¥–µ—Ä–∏–º —Ä—è–¥–æ–º –æ–±—ã—á–Ω—ã–º st.button, —á—Ç–æ–±—ã –±—ã–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ -->
              </div>
            </div>
            ''',
            unsafe_allow_html=True
        )
        # –∫–Ω–æ–ø–∫–∞ ¬´–í—ã–π—Ç–∏¬ª –æ—Ç–¥–µ–ª—å–Ω–æ (–∫ HTML –Ω–∏–∂–µ –µ—ë –Ω–µ –≤–æ—Ç–∫–Ω—É—Ç—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)
        if st.button("–í—ã–π—Ç–∏", key="logout_btn_sidebar"):
            try:
                supabase.auth.sign_out()
            except Exception:
                pass
            st.experimental_set_query_params()  # —Å–±—Ä–æ—Å –º–∞—Ä—à—Ä—É—Ç–∞
            st.rerun()

# --- –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî –ª–µ–Ω–¥–∏–Ω–≥ –∏ –≤—ã—Ö–æ–¥–∏–º ---
if not user:
    render_landing()
    st.stop()

uid = _user_id(user)
if not uid:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id. –ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
    st.stop()

# ====== ROUTER ======
page, sub = get_route()

if page == "home":
    render_home_page(supabase, uid)
elif page == "workouts":
    if sub == "list" or sub is None:
        render_workouts_list(supabase, uid)
    elif sub == "filters":
        render_workouts_filters(supabase, uid)
    elif sub == "add":
        render_workouts_add(supabase, uid, None, None, None)
    elif sub == "detail":
        qp = dict(st.query_params)
        workout_id = qp.get("workout_id")
        if isinstance(workout_id, list):
            workout_id = workout_id[0]
        render_workout_detail_view(supabase, user_id=uid, workout_id=workout_id)
elif page == "goals":
    render_goals_overview(supabase, uid)
elif page == "plan":
    render_plan_overview(supabase, uid)
elif page == "coach":
    render_coach_chat(supabase, uid)
elif page == "nutrition":
    if sub == "history" or sub is None:
        render_nutrition_history(supabase, uid)
    elif sub == "calories":
        render_nutrition_calories(supabase, uid)
    elif sub == "filters":
        render_nutrition_filters(supabase, uid)
    elif sub == "add":
        render_nutrition_add(supabase, uid)
elif page == "profile":
    if sub == "data" or sub is None:
        render_profile_data(supabase, uid)
    elif sub == "promo":
        render_profile_promo(supabase, uid)
    elif sub == "logout":
        render_profile_logout(supabase, uid)
elif page == "badges":
    render_badges_overview(supabase, uid)
else:
    st.error("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# ====== PAGES ======

def render_home_page(supabase, uid: str):
    st.title("üè† –ì–ª–∞–≤–Ω–∞—è")
    render_subnav("home", [("quotes","–¶–∏—Ç–∞—Ç—ã"), ("insights","–ò–Ω—Å–∞–π—Ç—ã")], get_route()[1])
    st.subheader("üèÉ CapyRun ‚Äî FIT Analyzer")
    st.caption("–ó–∞–≥—Ä—É–∑–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ .fit ‚Üí –æ—Ç—á—ë—Ç / –ø—Ä–æ–≥—Ä–µ—Å—Å / –ø–ª–∞–Ω + –∫–∞–ª–µ–Ω–¥–∞—Ä—å (ICS) + Excel")
    st.divider()
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ FIT-—Ñ–∞–π–ª(—ã)", type=["fit"], accept_multiple_files=True)
    hr_rest = st.session_state.get("hr_rest")
    hr_max = st.session_state.get("hr_max")
    zone_bounds_text = st.session_state.get("zone_bounds_text")
    if not uploaded_files:
        st.info("–ó–∞–≥—Ä—É–∑–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ .fit —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç—á—ë—Ç/–ø—Ä–æ–≥—Ä–µ—Å—Å.")
        return
    valid_files = [f for f in uploaded_files if f is not None and getattr(f, "size", 1) > 0]
    if not valid_files:
        st.warning("–§–∞–π–ª(—ã) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ .fit —Ñ–∞–π–ª—ã.")
        return
    if len(valid_files) == 1:
        try:
            render_single_workout(
                file=valid_files[0],
                supabase=supabase,
                user_id=uid,
                hr_rest=hr_rest,
                hr_max=hr_max,
                zone_bounds_text=zone_bounds_text,
            )
        except Exception as e:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞."); st.code(str(e))
    else:
        try:
            render_multi_workouts(
                files=valid_files,
                supabase=supabase,
                user_id=uid,
                hr_rest=hr_rest,
                hr_max=hr_max,
            )
        except ValueError as e:
            st.error(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–Ω–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã."
            )
            st.code(str(e))

def render_workouts_list(supabase, uid: str):
    st.title("üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    render_subnav("workouts", [("list","–°–ø–∏—Å–æ–∫"), ("filters","–§–∏–ª—å—Ç—Ä—ã"), ("add","–î–æ–±–∞–≤–∏—Ç—å")], get_route()[1])
    rows = list_workouts(supabase, user_id=uid, limit=100)
    if not rows:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return
    for r in rows:
        c1, c2, c3, c4, c5 = st.columns([4,2,2,2,2])
        with c1:
            st.write(f"**{r.get('filename','(–±–µ–∑ –∏–º–µ–Ω–∏)')}**")
            st.caption(f"id: `{r.get('id')}`")
        with c2: st.write(r.get("sport") or "‚Äî")
        with c3:
            d = r.get("duration_sec"); st.write(f"{int(d)//60} –º–∏–Ω" if d else "‚Äî")
        with c4:
            dm = r.get("distance_m"); st.write(f"{dm/1000:.2f} –∫–º" if dm else "‚Äî")
        with c5:
            if st.button("–û—Ç–∫—Ä—ã—Ç—å", key=f"open_{r.get('id')}"):
                set_route("workouts", "detail", workout_id=r.get("id"))
                st.rerun()

def render_workouts_filters(supabase, uid: str):
    st.title("üîé –§–∏–ª—å—Ç—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
    render_subnav("workouts", [("list","–°–ø–∏—Å–æ–∫"), ("filters","–§–∏–ª—å—Ç—Ä—ã"), ("add","–î–æ–±–∞–≤–∏—Ç—å")], get_route()[1])
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_workouts_add(supabase, uid: str, hr_rest: int, hr_max: int, zone_bounds_text: str):
    st.title("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
    render_subnav("workouts", [("list","–°–ø–∏—Å–æ–∫"), ("filters","–§–∏–ª—å—Ç—Ä—ã"), ("add","–î–æ–±–∞–≤–∏—Ç—å")], get_route()[1])
    uploaded = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ .fit —Ñ–∞–π–ª—ã", type=["fit"], accept_multiple_files=True)
    if uploaded and st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î"):
        saved, failed = 0, []
        for f in uploaded:
            try:
                ok, err, _ = save_workout(
                    supabase,
                    user_id=uid,
                    filename=getattr(f,"name","unknown.fit"),
                    size_bytes=len(f.getvalue()),
                    parsed=None,
                )
                if ok: saved += 1
                else: failed.append(f"{f.name}: {err}")
            except Exception as ex:
                failed.append(f"{f.name}: {ex}")
        if saved: st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved}")
        if failed: st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n- " + "\n- ".join(failed))
        st.rerun()

def render_workout_detail_view(supabase, user_id: str, workout_id: str):
    st.title("üìÑ –î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    render_subnav("workouts", [("list","–°–ø–∏—Å–æ–∫"), ("filters","–§–∏–ª—å—Ç—Ä—ã"), ("add","–î–æ–±–∞–≤–∏—Ç—å")], get_route()[1])
    if not workout_id:
        st.info("–ù–µ –≤—ã–±—Ä–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        return
    row = get_workout_by_id(supabase, workout_id=workout_id, user_id=user_id)
    if not row:
        st.error("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    c1,c2,c3,c4 = st.columns([4,2,2,2])
    with c1: st.markdown(f"**{row.get('filename','')}**"); st.caption(f"id: `{row.get('id')}`")
    with c2: st.write(row.get("sport") or "‚Äî")
    with c3:
        d = row.get("duration_sec"); st.write(f"{int(d)//60} –º–∏–Ω" if d else "‚Äî")
    with c4:
        dm = row.get("distance_m"); st.write(f"{dm/1000:.2f} –∫–º" if dm else "‚Äî")
    st.divider()
    st.subheader("fit_summary")
    st.json(row.get("fit_summary") or {})
    if st.button("‚Üê –ù–∞–∑–∞–¥"):
        set_route("workouts","list"); st.rerun()

# ---------- –ü–†–û–§–ò–õ–¨ (–∑–∞–≥–ª—É—à–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ) ----------
def render_profile_data(supabase, uid: str):
    st.title("üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    render_subnav("profile", [("data","–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), ("promo","–ü—Ä–æ–º–æ-–∫–æ–¥"), ("logout","–í—ã–π—Ç–∏")], get_route()[1])
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_profile_promo(supabase, uid: str):
    st.title("üè∑Ô∏è –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –ü—Ä–æ–º–æ-–∫–æ–¥")
    render_subnav("profile", [("data","–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), ("promo","–ü—Ä–æ–º–æ-–∫–æ–¥"), ("logout","–í—ã–π—Ç–∏")], get_route()[1])
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_profile_logout(supabase, uid: str):
    st.title("üö™ –í—ã–π—Ç–∏")
    render_subnav("profile", [("data","–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), ("promo","–ü—Ä–æ–º–æ-–∫–æ–¥"), ("logout","–í—ã–π—Ç–∏")], get_route()[1])
    st.info("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")
    # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∞—É—Ç–∞ –≤ auth, –≤—ã–∑–æ–≤–∏ –µ—ë —Ç—É—Ç:
    # auth_sign_out(supabase)

def render_badges_overview(supabase, uid: str):
    st.title("ü•á –ë–µ–π–¥–∂–∏ –∏ —Ä–µ–∫–æ—Ä–¥—ã")
    render_subnav("badges", [("overview","–û–±–∑–æ—Ä")], get_route()[1])
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_goals_overview(supabase, uid: str):
    st.title("üéØ –¶–µ–ª–∏")
    render_subnav("goals", [("overview","–û–±–∑–æ—Ä"), ("new","–ù–æ–≤–∞—è —Ü–µ–ª—å")], get_route()[1])
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_plan_overview(supabase, uid: str):
    st.title("üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω")
    render_subnav("plan", [("overview","–û–±–∑–æ—Ä"), ("import","–ò–º–ø–æ—Ä—Ç"), ("export","–≠–∫—Å–ø–æ—Ä—Ç")], get_route()[1])
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_coach_chat(supabase, uid: str):
    st.title("üí¨ –ß–∞—Ç —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º")
    render_subnav("coach", [("chat","–ß–∞—Ç"), ("history","–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤")], get_route()[1])
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_nutrition_history(supabase, uid: str):
    st.title("üçΩÔ∏è –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è ‚Äî –ò—Å—Ç–æ—Ä–∏—è")
    render_subnav("nutrition", [("history","–ò—Å—Ç–æ—Ä–∏—è"), ("calories","–ö–∞–ª–æ—Ä–∏–∏"), ("add","–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏")], get_route()[1])
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_nutrition_calories(supabase, uid: str):
    st.title("üî• –ö–∞–ª–æ—Ä–∏–∏")
    render_subnav("nutrition", [("history","–ò—Å—Ç–æ—Ä–∏—è"), ("calories","–ö–∞–ª–æ—Ä–∏–∏"), ("add","–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏")], get_route()[1])
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_nutrition_filters(supabase, uid: str):
    st.title("üßÆ –§–∏–ª—å—Ç—Ä—ã –ø–∏—Ç–∞–Ω–∏—è")
    render_subnav("nutrition", [("history","–ò—Å—Ç–æ—Ä–∏—è"), ("calories","–ö–∞–ª–æ—Ä–∏–∏"), ("add","–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏")], get_route()[1])
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def render_nutrition_add(supabase, uid: str):
    st.title("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏")
    render_subnav("nutrition", [("history","–ò—Å—Ç–æ—Ä–∏—è"), ("calories","–ö–∞–ª–æ—Ä–∏–∏"), ("add","–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏")], get_route()[1])
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")