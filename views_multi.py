# views_multi.py
import pandas as pd
import altair as alt
import streamlit as st
import datetime as dt
from parsing import parse_fit_file
from db import save_workouts, fetch_workouts
from utils import format_duration, ewma_daily, build_ics, to_excel

def render_multi_workouts(files, supabase, user_id, hr_rest: int, hr_max: int):
    st.subheader("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: —Å–≤–æ–¥–∫–∞ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º")

    # --- Parse all files and collect summaries ---
    summaries = []
    for f in files:
        try:
            _, _, _, summary = parse_fit_file(f, hr_rest, hr_max)
            if summary is not None and isinstance(summary, dict):
                summaries.append(summary)
        except Exception as e:
            st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {getattr(f, 'name', str(f))}. {e}")

    # --- Build DataFrame for summaries ---
    if not summaries:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return

    df_sum = pd.DataFrame(summaries)
    # Defensive: ensure 'date' and 'start_time' exist and are not all NaN
    if "date" not in df_sum.columns or df_sum["date"].isna().all():
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤.")
        return

    # Drop rows without date, sort by start_time if present
    df_sum = df_sum.dropna(subset=["date"])
    if "start_time" in df_sum.columns:
        df_sum = df_sum.sort_values("start_time")
    df_sum = df_sum.reset_index(drop=True)

    # Normalize date column
    df_sum["date"] = pd.to_datetime(df_sum["date"], errors="coerce").dt.normalize()
    if "time_s" in df_sum.columns:
        df_sum["time_hms"] = df_sum["time_s"].apply(format_duration)

    st.dataframe(df_sum)

    # --- Daily load + ATL/CTL/TSB ---
    st.subheader("–ù–∞–≥—Ä—É–∑–∫–∞ (TRIMP) –ø–æ –¥–Ω—è–º –∏ —Ç—Ä–µ–Ω–¥—ã ATL/CTL/TSB")
    # Defensive: fill missing TRIMP/distance_km with 0 for aggregation
    for col in ["TRIMP", "distance_km"]:
        if col not in df_sum.columns:
            df_sum[col] = 0.0
        else:
            df_sum[col] = pd.to_numeric(df_sum[col], errors="coerce").fillna(0.0)

    daily = df_sum.groupby("date").agg(
        TRIMP=("TRIMP", "sum"),
        distance_km=("distance_km", "sum")
    ).reset_index()

    # Fill missing days in the range
    if not daily.empty:
        full = pd.DataFrame({"date": pd.date_range(daily["date"].min(), daily["date"].max(), freq="D")})
        daily = full.merge(daily, on="date", how="left").fillna({"TRIMP": 0.0, "distance_km": 0.0})
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏.")
        return

    daily["ATL"] = ewma_daily(daily["TRIMP"].values, tau_days=7)
    daily["CTL"] = ewma_daily(daily["TRIMP"].values, tau_days=42)
    daily["TSB"] = daily["CTL"] - daily["ATL"]

    base = daily.melt(id_vars="date", value_vars=["TRIMP","ATL","CTL","TSB"], var_name="metric", value_name="value")
    chart = alt.Chart(base).mark_line().encode(x="date:T", y="value:Q", color="metric:N").interactive()
    st.altair_chart(chart, use_container_width=True)

    last7 = daily.tail(7)
    c1, c2, c3, c4 = st.columns(4)
    with c1:
        st.metric("TRIMP 7–¥", f"{last7['TRIMP'].sum():.0f}")
    with c2:
        st.metric("DIST 7–¥", f"{last7['distance_km'].sum():.1f} –∫–º")
    with c3:
        st.metric("ATL (—Å–µ–≥–æ–¥–Ω—è)", f"{daily['ATL'].iloc[-1]:.0f}")
    with c4:
        st.metric("TSB (—Å–µ–≥–æ–¥–Ω—è)", f"{daily['TSB'].iloc[-1]:.0f}")

    # --- Plan for next week ---
    st.subheader("üìù –ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–ª–∞–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")
    plan_df = pd.DataFrame()
    note = None
    if not daily.empty and not last7.empty:
        last_week_km = float(last7["distance_km"].sum())
        tsb_now = float(daily["TSB"].iloc[-1])

        if tsb_now < -10:
            target_km = max(0.0, last_week_km * 0.9)
            note = "TSB –Ω–∏–∑–∫–∏–π ‚Üí —Å–Ω–∏–∑–∏–º –æ–±—ä—ë–º (~-10%) –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."
        elif tsb_now > 10:
            target_km = last_week_km * 1.10
            note = "TSB –≤—ã—Å–æ–∫–∏–π ‚Üí –º–æ–∂–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–¥–Ω—è—Ç—å –æ–±—ä—ë–º (~+10%)."
        else:
            target_km = last_week_km * 1.05
            note = "TSB –≤ –Ω–æ—Ä–º–µ ‚Üí –ø–æ–¥–¥–µ—Ä–∂–∏–º/—Å–ª–µ–≥–∫–∞ —É–≤–µ–ª–∏—á–∏–º (~+5%)."

        dist_split = pd.Series([0.12,0.16,0.10,0.18,0.08,0.26,0.10])  # –ü–Ω..–í—Å
        day_names = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
        km_plan = (dist_split * target_km).round(1)
        types = ["Easy Z1‚ÄìZ2", "Tempo Z3 (20‚Äì30 –º–∏–Ω)", "Easy Z1‚ÄìZ2",
                 "Intervals Z4 (6√ó3‚Äô/2‚Äô)", "Recovery 30‚Äì40‚Äô Z1", "Long Z2", "Easy + strides"]

        plan_df = pd.DataFrame({"–î–µ–Ω—å": day_names, "–¢–∏–ø": types, "–ü—Ä–æ–±–µ–∂–∫–∞ (–∫–º)": km_plan})
        if note:
            st.write(note)
        st.dataframe(plan_df)
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ (–Ω—É–∂–Ω–æ ‚â•1 –¥–µ–Ω—å —Å –¥–∞–Ω–Ω—ã–º–∏).")

    # --- ICS export ---
    with st.expander("üìÜ –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å (.ics)"):
        if plan_df.empty:
            st.warning("–ü–ª–∞–Ω –ø—É—Å—Ç ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π –µ–≥–æ –≤—ã—à–µ.")
        else:
            today = dt.date.today()
            next_monday = today + dt.timedelta(days=(7 - today.weekday())) if today.weekday() != 0 else today
            start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–ª–∞–Ω–∞", value=next_monday)
            workout_time = st.time_input("–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", value=dt.time(7, 0))
            selected_days = st.multiselect("–ö–∞–∫–∏–µ –¥–Ω–∏ –¥–æ–±–∞–≤–∏—Ç—å",
                                           options=["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"],
                                           default=["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"])
            duration_minutes = st.number_input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è (–º–∏–Ω)", 15, 240, 60, 5)

            location = st.text_input("–õ–æ–∫–∞—Ü–∏—è (–æ–ø—Ü.)", value="")
            alert_min = st.number_input("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –º–∏–Ω –¥–æ —Å—Ç–∞—Ä—Ç–∞", 0, 1440, 15, 5)

            ics_text = build_ics(
                plan_df=plan_df,
                start_date=start_date,
                workout_time=workout_time,
                selected_days=selected_days,
                duration_minutes=duration_minutes,
                location=location,
                alert_minutes=int(alert_min) if alert_min else 0,
            )
            st.download_button("üì• –°–∫–∞—á–∞—Ç—å iCal (.ics)", data=ics_text, file_name="capyrun_plan.ics", mime="text/calendar")

    # --- Excel export ---
    xls = to_excel({"Workouts": df_sum, "DailyLoad": daily, "NextWeekPlan": plan_df})
    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel (–ø—Ä–æ–≥—Ä–µ—Å—Å + –ø–ª–∞–Ω)", data=xls,
                       file_name="capyrun_progress.xlsx",
                       mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    # --- Save all to DB ---
    if st.button("üì¶ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"):
        save_workouts(supabase, user_id, summaries)
        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")

    # --- History from DB ---
    with st.expander("üìö –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"):
        try:
            df_hist = fetch_workouts(supabase, user_id, limit=100)
            # Defensive: check if df_hist is a DataFrame and not empty
            if isinstance(df_hist, pd.DataFrame) and not df_hist.empty:
                df_hist = df_hist.copy()
                if "time_s" in df_hist.columns:
                    df_hist["–≤—Ä–µ–º—è"] = df_hist["time_s"].apply(format_duration)
                st.dataframe(df_hist)
            else:
                st.write("–ü–æ–∫–∞ –ø—É—Å—Ç–æ.")
        except ValueError as e:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.")
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
