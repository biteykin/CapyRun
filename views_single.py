# views_single.py
import pandas as pd
import altair as alt
import streamlit as st
from parsing import parse_fit_file
from db import save_workouts
from utils import (
    speed_to_pace_min_per_km,
    parse_bounds,
    zones_time,
    to_excel,
)

def render_single_workout(file, supabase, user_id, hr_rest: int, hr_max: int, zone_bounds_text: str):
    df_rec, df_laps, df_ses, summary = parse_fit_file(file, hr_rest, hr_max)

    bounds = parse_bounds(zone_bounds_text)
    zt = zones_time(df_rec["hr"], bounds) if (not df_rec.empty and bounds) else None

    # KPIs
    c1, c2, c3 = st.columns(3)
    with c1:
        st.metric("–î–∏—Å—Ç–∞–Ω—Ü–∏—è", f"{summary['distance_km']:.2f} –∫–º" if summary["distance_km"] else "‚Äî")
    with c2:
        st.metric("–í—Ä–µ–º—è", summary["time_hms"] or (f"{summary['time_min']:.1f} –º–∏–Ω" if summary["time_min"] else "‚Äî"))
    with c3:
        st.metric("TRIMP (‚âà)", f"{summary['TRIMP']}" if summary["TRIMP"] else "‚Äî")

    c4, c5, c6 = st.columns(3)
    with c4:
        st.metric("EF (—Å–∫–æ—Ä–æ—Å—Ç—å/HR)", f"{summary['EF']}" if summary["EF"] else "‚Äî")
    with c5:
        st.metric("Decoupling Pa:Hr", f"{summary['Pa:Hr_%']}%" if summary["Pa:Hr_%"] is not None else "‚Äî")
    with c6:
        st.metric("–°—Ä–µ–¥–Ω–∏–π HR", f"{summary['avg_hr']}" if summary["avg_hr"] else "‚Äî")

    st.divider()

    # Charts
    if not df_rec.empty:
        left, right = st.columns(2)
        with left:
            st.subheader("–ü—É–ª—å—Å –∏ —Ç–µ–º–ø")
            base = pd.DataFrame({
                "t_min": pd.Series(df_rec["t_rel_s"]) / 60.0,
                "HR": df_rec["hr"],
                "Pace (–º–∏–Ω/–∫–º)": pd.to_numeric(pd.Series(df_rec["speed"]).apply(speed_to_pace_min_per_km), errors="coerce")
            })
            st.altair_chart(alt.Chart(base).mark_line().encode(x="t_min:Q", y="HR:Q").interactive(), use_container_width=True)
            st.altair_chart(alt.Chart(base).mark_line().encode(x="t_min:Q", y=alt.Y("Pace (–º–∏–Ω/–∫–º):Q", sort="descending")).interactive(), use_container_width=True)
        with right:
            st.subheader("–ö–∞–¥–µ–Ω—Å –∏ –≤—ã—Å–æ—Ç–∞")
            base2 = pd.DataFrame({
                "t_min": pd.Series(df_rec["t_rel_s"]) / 60.0,
                "Cadence (spm)": df_rec["cadence"],
                "Elevation (m)": df_rec["elev"],
            })
            st.altair_chart(alt.Chart(base2).mark_line().encode(x="t_min:Q", y="Cadence (spm):Q").interactive(), use_container_width=True)
            st.altair_chart(alt.Chart(base2).mark_line().encode(x="t_min:Q", y="Elevation (m):Q").interactive(), use_container_width=True)

    # Zones
    st.subheader("–ó–æ–Ω—ã –ø—É–ª—å—Å–∞")
    if zt is not None:
        df_z = zt.rename_axis("Zone").reset_index(name="seconds")
        total = df_z["seconds"].sum()
        df_z["%"] = (df_z["seconds"] / total * 100).round(1)
        st.dataframe(df_z)
    else:
        st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö HR –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –∑–æ–Ω.")

    # Tables
    st.subheader("–°–µ—Å—Å–∏—è")
    st.dataframe(df_ses if not df_ses.empty else pd.DataFrame(columns=["‚Äî"]))
    st.subheader("–ö—Ä—É–≥–∏ (laps)")
    st.dataframe(df_laps if not df_laps.empty else pd.DataFrame(columns=["‚Äî"]))
    st.subheader("–¢–æ—á–∫–∏ (records) ‚Äî –±–µ–∑ GPS")
    st.dataframe(df_rec.head(500) if not df_rec.empty else pd.DataFrame(columns=["‚Äî"]))
    if not df_rec.empty and len(df_rec) > 500:
        st.caption(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 500 —Å—Ç—Ä–æ–∫ –∏–∑ {len(df_rec)}.")

    # Downloads
    xls = to_excel({
        "Summary": pd.DataFrame([summary]),
        "Sessions": df_ses,
        "Laps": df_laps,
        "Records": df_rec
    })
    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel", data=xls,
                       file_name="fit_report.xlsx",
                       mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    # Save to DB
    if st.button("üì¶ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é"):
        save_workouts(supabase, user_id, [summary])
        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
