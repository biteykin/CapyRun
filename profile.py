# profile.py
from typing import Any, Dict, Optional
import streamlit as st

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_PROFILE: Dict[str, Any] = {
    "hr_rest": 50,
    "hr_max": 190,
    "zone_bounds_text": "110,130,145,160,175",
}

def _select_profile(supabase, user_id: str) -> Optional[Dict[str, Any]]:
    res = supabase.table("user_profiles").select("*").eq("user_id", user_id).execute()
    data = getattr(res, "data", None) or []
    return data[0] if data else None

def load_or_init_profile(supabase, user_id: str) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç —á–µ—Ä–µ–∑ UPSERT.
    –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–æ–Ω—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –≤–µ—Ä–Ω—ë—Ç —Ö–æ—Ç—è –±—ã –¥–µ—Ñ–æ–ª—Ç.
    """
    if not user_id:
        return {**DEFAULT_PROFILE, "user_id": None}

    # —É–∂–µ –µ—Å—Ç—å?
    row = _select_profile(supabase, user_id)
    if row:
        return row

    # —Å–æ–∑–¥–∞—Ç—å (–±–µ–∑ –¥—É–±–ª–µ–π)
    new_row = {"user_id": user_id, **DEFAULT_PROFILE}
    try:
        supabase.table("user_profiles").upsert(new_row, on_conflict="user_id").execute()
    except Exception:
        # –¥–∞–¥–∏–º UI –∂–∏—Ç—å, –∞ –Ω–∞–≤–µ—Ä—Ö—É –ø–æ–∫–∞–∂–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–ø—Ä–æ–≤–µ—Ä—å RLS/—Å—Ö–µ–º—É). –ò—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return new_row

    # –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å
    row2 = _select_profile(supabase, user_id)
    return row2 or new_row

def profile_sidebar(supabase, user: Dict[str, Any], profile_row: Dict[str, Any]):
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: hr_rest, hr_max, zone_bounds_text
    """
    st.markdown("### ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")

    hr_rest = st.number_input(
        "–ü—É–ª—å—Å –≤ –ø–æ–∫–æ–µ (HRrest)",
        min_value=30, max_value=100,
        value=int(profile_row.get("hr_rest", DEFAULT_PROFILE["hr_rest"])),
        step=1, key="ui_hr_rest",
    )
    hr_max = st.number_input(
        "–ú–∞–∫—Å. –ø—É–ª—å—Å (HRmax)",
        min_value=140, max_value=230,
        value=int(profile_row.get("hr_max", DEFAULT_PROFILE["hr_max"])),
        step=1, key="ui_hr_max",
    )
    zone_bounds_text = st.text_input(
        "–ì—Ä–∞–Ω–∏—Ü—ã –∑–æ–Ω HR (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
        value=str(profile_row.get("zone_bounds_text", DEFAULT_PROFILE["zone_bounds_text"])),
        help="–ù–∞–ø—Ä.: 110,130,145,160,175",
        key="ui_zone_bounds",
    )

    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"):
        row = {
            "user_id": user.get("id") if isinstance(user, dict) else getattr(user, "id", None),
            "hr_rest": int(hr_rest),
            "hr_max": int(hr_max),
            "zone_bounds_text": zone_bounds_text.strip(),
        }
        try:
            supabase.table("user_profiles").upsert(row, on_conflict="user_id").execute()
            st.success("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        except Exception:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–ª–∏—Ç–∏–∫–∏ RLS –∏ —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã.")

    return int(hr_rest), int(hr_max), zone_bounds_text
