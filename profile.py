# profile.py
from typing import Any, Dict, Optional
import streamlit as st

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_PROFILE: Dict[str, Any] = {
    "hr_rest": 50,
    "hr_max": 190,
    "zone_bounds_text": "110,130,145,160,175",
}

def _safe_select_profile(supabase, user_id: str) -> Optional[Dict[str, Any]]:
    """–ß–∏—Ç–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–∏ –ª—é–±—ã—Ö APIError –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –∏ –Ω–µ —Ä–æ–Ω—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    try:
        res = supabase.table("user_profiles").select("*").eq("user_id", user_id).execute()
        data = getattr(res, "data", None) or []
        return data[0] if data else None
    except Exception:
        # —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º –ø—Ä–∏ RLS/–ø–æ–ª–∏—Ç–∏–∫–∞—Ö/—Å—Ö–µ–º–µ
        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ user_profiles (RLS/–ø–æ–ª–∏—Ç–∏–∫–∏). –ò—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return None

def _safe_upsert_profile(supabase, row: Dict[str, Any]) -> bool:
    """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å upsert. –ü—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False –∏ –Ω–µ —Ä–æ–Ω—è–µ—Ç UI."""
    try:
        supabase.table("user_profiles").upsert(row, on_conflict="user_id").execute()
        return True
    except Exception:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (RLS/–ø–æ–ª–∏—Ç–∏–∫–∏).")
        return False

def load_or_init_profile(supabase, user_id: str) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞/–∑–∞–ø–∏—Å–∏ ‚Äî –¥–µ—Ñ–æ–ª—Ç —Å user_id.
    –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–æ–Ω—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    """
    if not user_id:
        return {**DEFAULT_PROFILE, "user_id": None}

    row = _safe_select_profile(supabase, user_id)
    if row:
        return row

    # –ü—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –∏–ª–∏ SELECT –Ω–µ –¥–∞–ª–∏ ‚Äî –≤–µ—Ä–Ω—ë–º –¥–µ—Ñ–æ–ª—Ç, –∞ upsert –ø–æ–ø—Ä–æ–±—É–µ–º "–≤—Ç–∏—Ö—É—é"
    default_row = {"user_id": user_id, **DEFAULT_PROFILE}
    _safe_upsert_profile(supabase, default_row)
    # –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å (–µ—Å–ª–∏ SELECT –∑–∞–ø—Ä–µ—â—ë–Ω ‚Äî —Å–Ω–æ–≤–∞ –≤–µ—Ä–Ω—ë—Ç None)
    row2 = _safe_select_profile(supabase, user_id)
    return row2 or default_row

def profile_sidebar(supabase, user: Dict[str, Any], profile_row: Dict[str, Any]):
    """
    –°–∞–π–¥–±–∞—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: hr_rest, hr_max, zone_bounds_text.
    –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞–µ—Ç –∏–∑-–∑–∞ –ë–î.
    """
    st.markdown("### ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")

    hr_rest = st.number_input(
        "–ü—É–ª—å—Å –≤ –ø–æ–∫–æ–µ (HRrest)",
        min_value=30, max_value=100,
        value=int(profile_row.get("hr_rest", DEFAULT_PROFILE["hr_rest"])),
        step=1, key="ui_hr_rest",
    )
    hr_max = st.number_input(
        "–ú–∞–∫—Å. –ø—É–ª—å—Å (HRmax)",
        min_value=140, max_value=230,
        value=int(profile_row.get("hr_max", DEFAULT_PROFILE["hr_max"])),
        step=1, key="ui_hr_max",
    )
    zone_bounds_text = st.text_input(
        "–ì—Ä–∞–Ω–∏—Ü—ã –∑–æ–Ω HR (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
        value=str(profile_row.get("zone_bounds_text", DEFAULT_PROFILE["zone_bounds_text"])),
        help="–ù–∞–ø—Ä.: 110,130,145,160,175",
        key="ui_zone_bounds",
    )

    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"):
        row = {
            "user_id": user.get("id") if isinstance(user, dict) else getattr(user, "id", None),
            "hr_rest": int(hr_rest),
            "hr_max": int(hr_max),
            "zone_bounds_text": zone_bounds_text.strip(),
        }
        ok = _safe_upsert_profile(supabase, row)
        if ok:
            st.success("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        else:
            st.error("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–ø—Ä–æ–≤–µ—Ä—å RLS/–ø–æ–ª–∏—Ç–∏–∫–∏ –≤ Supabase).")

    return int(hr_rest), int(hr_max), zone_bounds_text
