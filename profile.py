# profile.py ‚Äî –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ß–°–°, –∑–æ–Ω—ã), —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase —Å RLS

from __future__ import annotations
import datetime as dt
from typing import Any, Dict, Optional, Tuple

import streamlit as st

DEFAULTS = {
    "hr_rest": 50,
    "hr_max": 185,
    "zone_bounds_text": "120,140,155,170",  # –ø—Ä–∏–º–µ—Ä
}

def _attach_auth_token(supabase) -> Optional[str]:
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç JWT –≤ PostgREST/REST –∫–ª–∏–µ–Ω—Ç Supabase –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã RLS.
    """
    token = None
    # 1. –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ session_state (–±—ã—Å—Ç—Ä–µ–µ)
    token = st.session_state.get("sb_access_token", None)
    # 2. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ supabase.auth.get_session()
    if not token:
        try:
            sess = supabase.auth.get_session()
            if sess is not None:
                # supabase-py >=2.0: session is dict or object
                token = getattr(sess, "access_token", None)
                if token is None and hasattr(sess, "session"):
                    token = getattr(sess.session, "access_token", None)
                if token is None and isinstance(sess, dict):
                    token = sess.get("access_token")
        except Exception:
            pass
    # 3. –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ postgrest/rest
    if token:
        try:
            if hasattr(supabase, "postgrest") and hasattr(supabase.postgrest, "auth"):
                supabase.postgrest.auth(token)
            elif hasattr(supabase, "rest") and hasattr(supabase.rest, "auth"):
                supabase.rest.auth(token)
        except Exception:
            pass
    return token

def _get_current_user_id(supabase) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç user_id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ supabase.auth.get_user().
    """
    try:
        gu = supabase.auth.get_user()
        # supabase-py >=2.0: gu.user.id, –∏–Ω–æ–≥–¥–∞ gu["user"]["id"]
        if hasattr(gu, "user") and hasattr(gu.user, "id"):
            return gu.user.id
        if isinstance(gu, dict):
            user = gu.get("user")
            if isinstance(user, dict):
                return user.get("id")
    except Exception:
        pass
    return None

def load_or_init_profile(supabase, user_id: str) -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ user_id. –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–æ–∫–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç—ã (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è).
    """
    _attach_auth_token(supabase)
    if not user_id:
        return {"user_id": None, **DEFAULTS}
    try:
        res = (
            supabase.table("profiles")
            .select("user_id, hr_rest, hr_max, zone_bounds_text")
            .eq("user_id", user_id)
            .limit(1)
            .execute()
        )
        # supabase-py: .data (v2), .json (v1), –∏–ª–∏ []
        data = getattr(res, "data", None) or getattr(res, "json", None) or []
        if data and isinstance(data, list) and data[0]:
            row = data[0]
            return {
                "user_id": row.get("user_id", user_id),
                "hr_rest": row.get("hr_rest", DEFAULTS["hr_rest"]),
                "hr_max": row.get("hr_max", DEFAULTS["hr_max"]),
                "zone_bounds_text": row.get("zone_bounds_text", DEFAULTS["zone_bounds_text"]),
            }
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {e}")
    return {"user_id": user_id, **DEFAULTS}

def save_profile(supabase, hr_rest: int, hr_max: int, zone_bounds_text: str) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (upsert –ø–æ user_id).
    user_id –±–µ—Ä—ë—Ç—Å—è –∏–∑ supabase.auth.get_user(), –∞ –Ω–µ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    """
    _attach_auth_token(supabase)
    uid = _get_current_user_id(supabase)
    if not uid:
        st.error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return False

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º dict comprehension –¥–ª—è row, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    row = {
        "user_id": uid,
        "hr_rest": int(hr_rest) if hr_rest is not None else None,
        "hr_max": int(hr_max) if hr_max is not None else None,
        "zone_bounds_text": (zone_bounds_text or "").strip(),
        "updated_at": dt.datetime.utcnow().isoformat(),
    }

    try:
        supabase.table("profiles").upsert(row, on_conflict="user_id").execute()
        return True
    except Exception as e:
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        msg = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–ø—Ä–æ–≤–µ—Ä—å RLS/–ø–æ–ª–∏—Ç–∏–∫–∏ –≤ Supabase)."
        info = getattr(e, "args", [None])[0]
        if isinstance(info, dict):
            code = info.get("code", "")
            message = info.get("message", "")
            details = info.get("details", "")
            hint = info.get("hint", "")
            msg = f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω [{code}]: {message}\n{details}\n{hint}"
        st.error(msg)
        return False

def profile_sidebar(supabase, user: Dict[str, Any], profile_row: Dict[str, Any]) -> Tuple[int, int, str]:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç –±–ª–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–∞–π–¥–±–∞—Ä–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (hr_rest, hr_max, zone_bounds_text).
    """
    st.markdown("### ‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")
    hr_rest = st.number_input(
        "–ü—É–ª—å—Å –≤ –ø–æ–∫–æ–µ (HRrest)",
        min_value=30, max_value=120,
        value=int(profile_row.get("hr_rest", DEFAULTS["hr_rest"])),
        step=1,
        key="ui_hr_rest"
    )
    hr_max = st.number_input(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å (HRmax)",
        min_value=120, max_value=240,
        value=int(profile_row.get("hr_max", DEFAULTS["hr_max"])),
        step=1,
        key="ui_hr_max"
    )
    zone_bounds_text = st.text_input(
        "–ì—Ä–∞–Ω–∏—Ü—ã –∑–æ–Ω –ß–°–° (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
        value=str(profile_row.get("zone_bounds_text", DEFAULTS["zone_bounds_text"])),
        key="ui_zone_bounds"
    )

    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", use_container_width=True, key="btn_save_profile"):
        with st.spinner("–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å..."):
            ok = save_profile(supabase, hr_rest, hr_max, zone_bounds_text)
        if ok:
            st.success("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        # –µ—Å–ª–∏ –Ω–µ –æ–∫ ‚Äî save_profile —É–∂–µ –ø–æ–∫–∞–∑–∞–ª –æ—à–∏–±–∫—É

    return int(hr_rest), int(hr_max), zone_bounds_text